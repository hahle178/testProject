/**
 * Created by zhaofs on 2017/5/6.
 * 演示Handler应用
 */
import Handler from "ezdev-pcview/handler/Handler";
import ComponentManager from "ezdev-pcview/components/ComponentManager";
import cacheUtils from "ezdev-pcview/cache/CacheUtils";
export default new Handler({
    resolveTpl: function (tpl) {
        return require("./tpl/" + tpl + ".html");
    },
    /*
    * 界面树的相关参数
    * */
    initHandler:function(){
        this.options= {
            treeId : 'tree_id',
            searchFormId : 'form',
            saveFormId : 'saveForm',
            leftId : 'leftcontent',
            detailId : 'orgDetail',
            findTree : "system/core/organization/list",
            detailTree : "system/core/organization/get/",
            lastRowNum:0
        };
    },
    /**
     * 初始化机构树
     */
    initTree : function() {

        var tree_setting = {
            check : {
                enable : false
            },
            data : {
                simpleData : {
                    enable : true
                }
            },
            callback : {
                onClick : function(event, treeId, treeNode) {
                    var nodeid = treeNode.id;
                    this.triggerOperation(nodeid);
                }.bind(this)
            },
            view :{
                fontCss: function(treeId, treeNode){
                    return (!!treeNode.highlight) ? {color:"blue", "font-weight":"bold"} : {color:"#000", "font-weight":"normal"};
                }
            }
        };

        $.ajax({
            cache : false,
            async : false,// 同步加载
            type : "POST",
            url : this.options.findTree,
            dataType : "json",
            success : function(data) {
                $.fn.zTree.init($('#' + this.options.treeId),
                    tree_setting, data.data);
                var zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
                var node = zTree.getNodeByParam("id", "root");
                zTree.selectNode(node, false);
                var nodes = zTree.getSelectedNodes();
                var nodeid = nodes[0].id;
                this.triggerOperation(nodeid);
                //zTree.expandAll(true);
                zTree.expandNode(node, true, false, false);  //默认展开第一级
            }.bind(this)
        });
    },
    /*
    * 查找
    * */
    searchZtree : function(element) {
        var treeId ="tree_id";
        var searchConditionId = "txtSearch";
        // this.searchByName(treeId, searchConditionId, "");
        var searchCondition = $('#' + searchConditionId).val();
        var searchObj = {};
        searchObj.treeId = treeId;
        searchObj.condition = searchCondition;
        var nodeObj = this.treeSearchAndExpand(searchObj);
        if(nodeObj){
            if(nodeObj.id){
                this.triggerOperation(nodeObj.id, nodeObj.type);
            }else{
                layer.msg(`没有查询到指定的组织！`);
            }
        }
    },
    /**
     * 点击树的节点查看机构详情
     */
    triggerOperation : function(nodeid) {
        let args={
            tpl : "detail",
            url:  "/system/core/organization/get/"+nodeid,
            contentId:"list"
        }
        this.details(args);//查看详情页面^_^
    },
    /**
     * 树状列表查询后展示方法
     *
     * @param
     * searchObj,查询条件对象，内部含有treeId和condition属性。treeId树ID，condition是查询条件，树状列表上部查询框提供的节点名称查询条件
     * @param treeId树ID
     * @returns
     */
    treeSearchAndExpand: function (searchObj) {
        var treeObj = $.fn.zTree.getZTreeObj(searchObj.treeId);
        // <1>. 先把全部节点更新为普通样式
        var treeNodes = treeObj.transformToArray(treeObj.getNodes());
        for (var i = 0; i < treeNodes.length; i++) {
            treeNodes[i].highlight = false;
            treeObj.updateNode(treeNodes[i]);
        }
        // <2>.得到模糊匹配搜索条件的节点数组集合
        var highlightNodes = new Array();

        if (searchObj.condition != "") {
            highlightNodes = treeObj.getNodesByParamFuzzy("name", searchObj.condition, null);
        } else {
            return;
        }
        // <3>.高亮显示并展示【指定节点s】
        var nodeObj = {};
        if (highlightNodes != null && highlightNodes.length > 0) {
            treeObj.cancelSelectedNode();
            var first = true;
            for (var i = 0; i < highlightNodes.length; i++) {
                if (searchObj.type && searchObj.type.indexOf(highlightNodes[i].type) < 0) {
                    continue;
                }
                // treeObj.selectNode(highlightNodes[i], true);
                highlightNodes[i].highlight = true;
                if (first) {
                    nodeObj = highlightNodes[i];
                    treeObj.selectNode(highlightNodes[i], true);
                    first = false;
                }
                treeObj.updateNode(highlightNodes[i]);// 级联选中
                treeObj.expandNode(highlightNodes[i].getParentNode(), true);
            }
        }
        return nodeObj;
    },
    /*
    * 增删改操作相关
    *
    * */
    /*
    *add方法调用完毕后，添加父节点信息
    * */
    onAdded:function(args){
        /*取选中的节点的信息，新建操作中，这个选中的节点就是父节点！-start*/
        var zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
        var nodes = zTree.getSelectedNodes();
        var nodeid = nodes[0].id;
        var nodename = nodes[0].name;
        var nodeType = nodes[0].orgType;
        var orgTreeLevel = nodes[0].orgTreeLevel;
        var nodeOrgCode = nodes[0].orgCode;
        /*取选中的节点的信息，新建操作中，这个选中的节点就是父节点！-end*/
        //add_orgTreeLevel  add_parentId  add_parentName  add_orgCode --> ajaxurl
        //add.html页面赋值
        $("#add_orgTreeLevel").val((parseInt(orgTreeLevel)+1).toString());
        $("#add_parentId").val(nodeid);
        $("#add_parentName").val(nodename);
        $("#add_orgCode").attr("ajaxurl",function(index,old){
            let parentidIndex=old.indexOf("parentid=");
            let pp= old.substring(0,parentidIndex+9);
            let parentID=pp+nodeid;
            return parentID;
        });

        //$("#").val();
    },
    /*在触发submit 的元素 e-event 中添加
    * 提交后触发
    *
    * */
    onSubmited:function(){
        let errSize=$(".has-error").length;
        if(errSize<1){
            //添加完毕后，重新展开树
            this.initTree();
            // 选中编辑的数据
            var zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
            let orgCode=$("#add_orgCode").val();//【add】页面
            let orgCode_edit=$("#orgCode").val();//【edit】页面
            if(orgCode==undefined){
                orgCode=orgCode_edit;
            }
            var node = zTree.getNodeByParam("orgCode",orgCode); var node = zTree.getNodeByParam("orgCode",orgCode);
            zTree.selectNode(node, false);//选择节点
            this.triggerOperation(node.id);//查看详情
        }
    },
    goBack:function(args){
        let zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
        var nodes = zTree.getSelectedNodes();
        var nodeid = nodes[0].id;
        zTree.selectNode(nodes[0], false);//选择节点
        this.triggerOperation(nodeid);
    },
    /*
    * 删除组织机构重写dialog
    * 20170925
    * */
    /**
     * 弹出信息框
     * @param args
     * {dialog:confirm,type:post-(默认),isReload:true-(默认),url:/demo/mybatisuser/pages-(可选)}
     */
    dialog(args) {
        let promise = null;
        switch (args.dialog) {
            case 'confirm':
                layer.confirm('你确定要执行此操作吗？', {
                    btn: ['确定', '取消'] //按钮
                }, function () {
                    layer.closeAll();
                    promise = this.ajaxResource(args).then(function (data) {
                        var zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
                        var nodes = zTree.getSelectedNodes();
                        var parentNode = nodes[0].getParentNode();
                        var nodeid=parentNode.id;
                        this.initTree();
                        zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
                        var node = zTree.getNodeByParam("id",nodeid);
                        zTree.selectNode(node, false);//选择节点
                        zTree.expandNode(node, true, false, false);
                        this.triggerOperation(node.id);//查看详情
                    }.bind(this));

                }.bind(this), function () {
                    layer.closeAll()
                });
                break;
            default:  //设置shade,zIndex解决附件上传对话框弹出遮罩层的问题，修改人lvhuwei
                let layerId = layer.open({
                    shade: 0,
                    zIndex: 1,
                    type: 1,
                    move: args.move,
                    title: args.title || '信息',
                    area: [args.width || '800px', args.height || '600px'] //宽高
                });
                args.contentId = $('#layui-layer' + layerId).find('.layui-layer-content');
                promise = this.render(args);
                break;
        }
        return promise;
    },
    /**
     * 点击领导设定按钮
     * @param args
     */
    leaderset : function (args) {
        let zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
        let nodes = zTree.getSelectedNodes();
        let selectedId = "";
        if(nodes.length > 0){
            let node = nodes[0];
            selectedId = node.id;
        }
        let url = "system/organization/leader/set/"+selectedId;
        args.tpl = "leaderset";
        args.contentId = "list";
        args.url = url;
        args.data = {orgId : selectedId};
        this.render(args);
    },
    /**
     * 保存领导设置
     * @param args
     */
    saveleaderset : function(args){
        let agencyLeader = [];
        let parentLeader = [];
        let leaderType = [];
        let leaderTypeName = [];
        let parentLeaderType = [];
        let agencyLeaderComps = $("[name='leader_agency']");
        let parentLeaderComps = $("[name='leader_parent']");
        let leaderTypeComps = $("[name='leaderType']");
        let parentLeaderTypeComps = $("[name='parentLeaderType']");
        for(let i=0;i<agencyLeaderComps.length;i++){ // 尚未加校验
            let agencyLeaderTmp = $(agencyLeaderComps[i]).val();
            let parentLeaderTmp = $(parentLeaderComps[i]).val();
            let leaderTypeTmp = $(leaderTypeComps[i]).val();
            let parentLeaderTypeTmp = $(parentLeaderTypeComps[i]).val();
            if(parentLeaderTypeTmp == "" || typeof (parentLeaderTypeTmp)==undefined){
                parentLeaderTypeTmp = "";
            }
            if(agencyLeaderTmp == "" || typeof (agencyLeaderTmp) == undefined){
                layer.msg("第" + (i+1) +"行 本级领导未选择，请选择");
                return false;
            }else{
                agencyLeader.push(agencyLeaderTmp);
            }
            if(parentLeaderTmp == "" || typeof (parentLeaderTmp) == undefined){
                parentLeader.push(" ");
            }else{
                parentLeader.push(parentLeaderTmp);
            }
            if(leaderTypeTmp == "" || typeof (leaderTypeTmp) == undefined){
                layer.msg("第" + (i+1) +"行 岗位未选择，请选择");
                return false;
            }else{
                leaderType.push(leaderTypeTmp);
                leaderTypeName.push($(leaderTypeComps[i]).find("option:selected").text());
            }
            parentLeaderType.push(parentLeaderTypeTmp);

        }
        let url = "system/organization/leader/save";
        let zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
        let nodes = zTree.getSelectedNodes();
        let selectedId = "";
        if(nodes.length > 0){
            let node = nodes[0];
            selectedId = node.id;
        }

        let data = {};
        data.agency = agencyLeader.toString();
        data.parent = parentLeader.toString();
        data.leaderType = leaderType.toString();
        data.leaderTypeName = leaderTypeName.toString();
        data.parentLeaderType = parentLeaderType.toString();
        data.orgId = selectedId;
        $.ajax({
            cache      :  false,
            url        :  url,
            type       : "POST",
            dataType   : "json",
            sync       :  false,
            data       :  data,
            success    : function(data){
                this.triggerOperation(selectedId);
            }.bind(this),
            error      : function (XMLHttpRequest,error,exception) {
                
            }
        });
    },
    /**
     * 增加一行
     * @param args
     */
    addleader : function(args){
        let currentRow = this.resetRowId()+1;
        //let currentRow = this.options.lastRowNum+=1;
        let addStr =`<tr id="leader_${currentRow}"></tr>`;
        let options=Object.assign({
            contentId:"leader_" +currentRow,
            data:{rows:currentRow}
        },args);
        $("#leaderset").append(addStr);
        this.render(options);
    },
    resetRowId : function(){
        let res;
        let rows = $("#leaderset").find("tr");
        if(rows.length > 1){
            for(let i = 1; i < rows.length ; i++){
                let obj = rows.get(i);
                let id_ = $(obj).attr("id");
                console.log("id is :" + id_)
                let temp_id = id_.split("_")[1];
                if(i == 1){
                    res = temp_id;
                }else{
                    if(temp_id > res){
                        res = temp_id;
                    }
                }
            }
        }
        return res;


    },
    /**
     * 删除一行
     * @param args
     */
    delRow : function (args) {
        let rows = $("#leaderset tbody").find("tr").length ;
        if(rows == 1){
            layer.msg("已是最后一行，请直接编辑");
            return false;
        }
        let id = "leader_" + args.row;
        $("#"+id).remove();
    },


    leaderSelect : function (args) {
        let selected = args.data;
        // 选中人员账号
        let account = selected.account;
        let index = args.index;
        let id = "leader_type_" + index;
        this.renderLeaderType(id,account);
    },

    renderLeaderType : function(id,account){
        let select =ComponentManager.getComObjectByDomId(id);
        select.updateArgs({url:'/system/core/user/queryposts/'+account});
        select.refresh();
    },



    test1 : function(args){
        let url = "/test/wangzhen";
        let data = {"account":"dept_A_general"};
        $.ajax({
            cache      :  false,
            url        :  url,
            type       : "GET",
            dataType   : "json",
            sync       :  false,
            data       :  data,
            success    : function(data){
                //this.triggerOperation(selectedId);
            }.bind(this),
            error      : function (XMLHttpRequest,error,exception) {

            }
        });
    },
    test : function (args) {
        let data = args.data;
        for(var i in data){
            alert(i + " : " + data[i])
        }
    },

    addParentLeaderType : function(args){
        let data = args.data;
        let postId = data.postId;
        let index = args.index;
       $("#leader_parent_"+index+"_hid").after("<input type='hidden' name='parentLeaderType' value='"+postId+"' id='parent_leader_posttype_"+index+"'/>");
    }

});


