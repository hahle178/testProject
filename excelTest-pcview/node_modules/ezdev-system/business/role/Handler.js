/**
 * Created by zhaofs on 2017/5/6.
 * 演示Handler应用
 */
import Handler from "ezdev-pcview/handler/Handler";

export default new Handler({
    resolveTpl: function (tpl) {
        return require("./tpl/" + tpl + ".html");
    },
    binddatescope: function (tpl) {

    },
    //初始化
    initHandler:function(args){
        this.options={
            dataScope:{},
            currentRoleID:""
        }
    },
    /*打开资源绑定对话框*/
    showDataScopeDialog:function(args){
        this.options.dataScope={};//每次打开清空原有
        /*创建dialog*/
        let layerId = layer.open({
            shade: 0.3,
            zIndex: 999999,
            type: 1,
            move: args.move,
            title: ['绑定数据', 'font-size:18px;'],
            area: [args.width || '40%', args.height || '65%'], //宽高
            btn:[`绑定`,`取消`],
            yes:function(){
                layer.closeAll();
                this.bindDataScops();
            }.bind(this),btn2: function(index, layero){
                //return false 开启该代码可禁止点击该按钮关闭
            }
        });
        //   /system/core/role/get/402899425e5139db015e55cb28c30006  /system/core/role/get/
        this.ajaxResource({url:args.url,type:"get"}).then(((result)=>{
            this.options.currentRoleID=result.data.id;//当前选择的角色
            $("#roleName").html(args.name);
            //原有dataScope 初始化
            let dataScopeTemp=this.options.dataScope;
            $.each(result.data.dataScopes,function (key,val) {
                dataScopeTemp[this["id"]]="";
            })
            //console.log("打开"+this.options.currentRoleID+"窗口！原有数据为：");
            //console.log(Object.keys(this.options.dataScope));
        }).bind(this));//请求后台资源
        /*加载dataScopeIndex.html-start*/
        args.contentId = $('#layui-layer' + layerId).find('.layui-layer-content');
        args.tpl="dataScopeIndex";
        args.url="";
        this.render(args).then(()=>{
            //初始化分页控件
            this.initjqPagination();
            /*执行查询 数据*/
            this.dataScopSearch();
        });

        /*加载dataScopeIndex.html-end*/
        /*dialog 按钮点击*/
       /* $(".btn-sure").click(function () {
            layer.closeAll();
        });
        $(".btn-cancel").click(function () {
            layer.closeAll();
        });*/
    },
    /*查询数据*/
    dataScopSearch:function(){
        let args={};
        args.form="searchForm_dataScope";
        args.contentId="dataScopeList";
        args.url="/system/core/datascope/list";
        args.tpl="dataScopeList";
        let form = $(`#${args.form}`);
        if (form.length > 0) {
            args.data = form.serialize();
            args.tpl = args.tpl || config.listTpl;
            return this.render(args).then(function (data) {
                let maxpage=parseInt(data.data.totalPages);
                let curpage=parseInt(data.data.pageNum);
                $(".pagination2").jqPagination("option", {
                    max_page : maxpage,
                    current_page :curpage,
                    trigger : false
                });
                //勾选选择框
                this.initCheckState();
            }.bind(this));
        } else {
            throw new Error("参数无效，DOM中无法找到id为[" + args.form + "]的Form！");
        }
    },
    //初始化分页控件
    initjqPagination:function(){
        $('.pagination2').jqPagination({
            current_page: 1, //设置当前页 默认为1
            max_page	: 1,
            page_string : '第{current_page}页,共{max_page}页',
            paged		: function(page) {
                $("#page").val(page);
                this.dataScopSearch();
            }.bind(this)
        });
    },
    /*初始化选择框*/
    initCheckState:function(){
        //当前页面列表
        let checkedAll=true;
        let dataScopeTemp=this.options.dataScope;
        $(`.dataScope`).each(function(){
            let id= $(this).attr("id");
            let checkedFlat=true;
            if(dataScopeTemp.hasOwnProperty(id)){
                $(this).prop("checked",true)
            }else{
                checkedFlat=false;
                $(this).prop("checked",false);
            };
            checkedAll=checkedAll&&checkedFlat;
        });
        checkedAll? $(`#dataScopeSelectAll`).prop("checked",true):$(`#dataScopeSelectAll`).prop("checked",false);
    },
    /*列表选择框点击*/
    checkDataScope:function(args){
        if($(`#${args.id}`).prop("checked")){
            this.options.dataScope[args.id]="";
        }else{
            if(this.options.dataScope.hasOwnProperty(args.id)){
                delete this.options.dataScope[args.id];
            }
        }
        //全选框是否勾选
        if($(".dataScope").length==$(".dataScope:checked").length){
            $(`#dataScopeSelectAll`).prop("checked",true);
        }else{
            $(`#dataScopeSelectAll`).prop("checked",false);
        }
        //console.log("当前数据："+Object.keys(this.options.dataScope));
    },
    /*全选/全不选*/
    dataScopeSelectAll:function(){
        let dataScopeTemp=this.options.dataScope;
        if($(`#dataScopeSelectAll`).prop("checked")){
           $(".dataScope").each(function(){
               let id= $(this).attr("id");
               $(this).prop("checked",true);
               dataScopeTemp[id]="";
           })
        }else{
            $(".dataScope").each(function(){
                let id= $(this).attr("id");
                $(this).prop("checked",false);
                if(dataScopeTemp.hasOwnProperty(id)){
                    delete dataScopeTemp[id];
                }
            });
        }
    },
    /*绑定所选数据*/
    bindDataScops:function(args){
        //url格式：system/core/datascope/binddatascopes/this.options.currentRoleID/{dataScopesID}
        let dataScopeStr=Object.keys(this.options.dataScope);
        if(dataScopeStr.length==0){
            dataScopeStr=0;
        }
        //console.log("绑定时的数据ids:"+dataScopeStr);
        var url=`system/core/datascope/binddatascopes/${this.options.currentRoleID}/${dataScopeStr}`;
        $.ajax({
            cache : false,
            type : "get",
            url : url,
            dataType : "json",
            success : function(data) {
                //console.log(`绑定完毕`);
            }.bind(this)
        });
    },
});


