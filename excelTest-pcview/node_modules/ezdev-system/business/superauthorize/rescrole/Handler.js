/**
 * Created by dongyue on 2017/5/6.
 * 演示Handler应用
 */
import Handler from "ezdev-pcview/handler/Handler";
import Table from "ezdev-pcview/components/table/Table";

export default new Handler({
    /**
     * 初始化常量
     * 注意：本Handler中，search方法中,zTree的ID已固定，如若更改zTreeId，请一起更新。
     * @returns {options1}
     */
    options1: function () {
        this.options = {
            leftId: 'leftcontent',
            rightId: 'rightcontent',
            leftTreeId: 'rescTree',
            leftTreeUrl: 'system/core/resource/list',
            roleListId: 'rolelistbind',
            roleListUrl: 'system/core/role/list',
            map: {}
        };
        return this;
    },

    resolveTpl: function (tpl) {
        return require("./tpl/" + tpl + ".html");
    },

    onIndexed: function () {
        this.options1();
        var main = this;
        //绑定全选事件
        $(document).on("click", "#quanxuan", function () {
            var ids = main.options.map;
            var xz = $(this).prop("checked");
            $(".qx").prop("checked", xz);
            $("#quanxuan").prop("checked", xz);
            var allRoles = document.getElementsByName("roles");
            if (xz) {
                for (var i = 0; i < allRoles.length; i++) {
                    ids[allRoles[i].id] = allRoles[i].id;
                }
            } else {
                for (var i = 0; i < allRoles.length; i++) {
                    delete ids[allRoles[i].id];
                }
            }
        });
        $(document).off("click", ".qx");
        $(document).on("click", ".qx", function (e) {
            var ids = main.options.map;
            var allRoles = document.getElementsByName("roles");
            var num = 0;
            for (var i = 0; i < allRoles.length; i++) {
                if (allRoles[i].checked) {
                    num = num + 1;
                }
            }
            if (num == allRoles.length) {
                $("#quanxuan").prop("checked", true);
            } else {
                $("#quanxuan").prop("checked", false);
            }
            var xz = $(e.target).prop("checked");
            if (xz) {
                ids[$(this).val()] = $(this).val();
            }
            else {
                delete ids[$(this).val()];
            }
        });
        this.initUserTree();
    },

    /**
     * 初始化用户树tree
     */
    initUserTree: function () {
        var tree_setting = {
            check: {
                enable: false
            },
            data: {
                simpleData: {
                    enable: true
                }
            },
            callback: {
                onClick: function (event, treeId, treeNode) {
                    if (treeNode.type == 'resource' || treeNode.type == 'bizsys') {
                        this.getAllroles(treeNode.id);
                        this.selResc(treeNode.id);
                        $("#currentResc").text(treeNode.name);
                    }
                }.bind(this),
            },
            view: {
                fontCss: function (treeId, treeNode) {
                    return (!!treeNode.highlight) ? {color: "blue", "font-weight": "bold"} : {
                        color: "#000", "font-weight": "normal"
                    };
                }
            }
        };

        $.ajax({
            cache: false,
            async: false,// 同步加载
            type: "POST",
            url: this.options.leftTreeUrl,
            dataType: "json",
            success: function (data) {
                //更改用户节点图标
                var nodes = data.data;
                //生成树
                $.fn.zTree.init($('#' + this.options.leftTreeId), tree_setting, nodes);
                //默认选中第一个用户
                var zTree = $.fn.zTree.getZTreeObj(this.options.leftTreeId);
                var nodes = zTree.getNodesByParam("type", "bizsys");
                zTree.selectNode(nodes[0], true);
                zTree.expandNode(nodes[0].getParentNode(), true, false, false);  //展开选中节点
                //保存按钮是否显示
                if (data.data.length == 0) {
                    $("#" + this.options.rightId + " #btnSure").attr('disabled', true);
                } else {
                    $("#" + this.options.rightId + " #btnSure").attr('disabled', false);
                }
                var defaultNode = nodes[0];
                this.getAllroles(defaultNode.id);//获取全部的角色
                this.selResc(defaultNode.id);
                $("#currentResc").text(defaultNode.name);
            }.bind(this)
        });
    },

    /**
     * 取消按钮
     */
    bindReset: function () {
        var zTree = $.fn.zTree.getZTreeObj(this.options.leftTreeId);
        var checkedNode = zTree.getSelectedNodes();
        this.getAllroles();
        this.selResc(checkedNode[0].id);
    },

    /**
     * 获取全部角色
     */
    getAllroles: function () {
        let args = {
            tpl: "list",
            url: "/system/core/role/list",
            contentId: "list"
        };
        this.search(args);
    },

    /**
     * 点击树节点，执行的方法
     */
    selResc: function (rescid) {
        if (!rescid) {
            $("#" + this.options.rightId + " #btnSure").attr('disabled', true);
        } else {
            $("#" + this.options.rightId + " #btnSure").attr('disabled', false);
        }
        $("#" + this.options.rightId + ' #page').val(1);
        $("#" + this.options.rightId + " #hidUserid").val(rescid);
        // 清除选中记录
        this.options.map = {};
        var ids = this.options.map;
        if (rescid) {
            var url = "system/core/resource/rolesbyrescid/" + rescid;
            $.ajax({
                cache: false,
                async: true,
                type: "GET",
                url: url,
                dataType: "json",
                success: function (data) {
                    if (data.data.length > 0) {
                        setTimeout(function () {
                            for (var i = 0; i < data.data.length; i++) {
                                $("#" + data.data[i].id).attr('checked', true);
                                ids[data.data[i].id] = data.data[i].id;
                            }
                            //判断是否需要勾选全选框
                            var boo = true;
                            var allRoles = document.getElementsByName("roles");
                            for (var i = 0; i < allRoles.length; i++) {
                                if (ids[allRoles[i].id] == null) {
                                    boo = false;
                                }
                            }
                            $("#quanxuan").prop("checked", boo);
                            //结束
                        }, 100);
                    }
                    return;
                }
            });
        }
    },

    /**
     * 提交保存
     */
    bindRoles: function () {
        var ids = this.options.map;
        var zTree = $.fn.zTree.getZTreeObj(this.options.leftTreeId);
        var checkedNode = zTree.getSelectedNodes();
        var rescid = checkedNode[0].id;
        //转换成ID串
        var roles = '';
        for (var i in ids) {
            roles = roles + i + ',';
        }
        /*20170925suntf
        if (roles == '') {
            layer.msg("没有选择角色！");
            return;
        }*/
        var param = {"rescid": rescid, "roleids": roles.toString()};
        var url = "system/core/authorize/bindrescroles";
        $.ajax({
            cache: false,
            data: param,
            type: "POST",
            url: url,
            dataType: "json",
            success: function (data) {
                //this.initUserTree();
            }.bind(this)
        });
    },

    /**
     * 实现查询功能
     * @param args
     * {url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}
     */
    search(args) {
        args.form = args.form || 'searchForm';
        var main = this;
        if (args.url) {
            args.contentId = args.contentId || config.listId;
            let form = $(`#${args.form}`);
            if (form.length > 0) {
                args.data = form.serialize();
                args.tpl = args.tpl || config.listTpl;
                return this.render(args).then(function (data) {
                    new Table({
                        pageNum: data.data.pageNum,
                        totalPages: data.data.totalPages,
                        totalSize: data.data.totalSize,
                        pageSize: data.data.pageSize,
                        buttonClickCallback: this.search.bind(this, args)
                    });
                }.bind(this)).then(
                    setTimeout(function () {
                        var ids = main.options.map;
                        var allRoles = document.getElementsByName("roles");
                        for (var i = 0; i < allRoles.length; i++) {
                            if (ids[allRoles[i].id] != null) {
                                $("#" + allRoles[i].id).attr('checked', true);
                            }
                        }
                    }, 100)
                );
            } else {
                throw new Error("参数无效，DOM中无法找到id为[" + args.form + "]的Form！");
            }
        } else {
            throw new Error("参数无效，请传递如{url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}的JS对象");
        }
    },

    /**
     * zTree上部的查询框
     * @param element
     */
    searchZtree: function () {
        var treeId = "rescTree";
        var searchConditionId = "txtSearch";
        var searchCondition = $('#' + searchConditionId).val();
        var searchObj = {};
        searchObj.treeId = treeId;
        searchObj.condition = searchCondition;
        searchObj.type = "resource,bizsys";
        //获得选择的那个节点
        var nodeObj = this.treeSearchAndExpand(searchObj);
        if (nodeObj && nodeObj.id) {
            if (nodeObj.id) {
                this.getAllroles();
                this.selResc(nodeObj.id);
                $("#currentResc").text(nodeObj.name);
            } else {
            }
        } else {
            layer.msg("没有查询到指定的资源！");
        }
    },

    /**
     * 树状列表查询后展示方法
     *
     * @param
     * searchObj,查询条件对象，内部含有treeId和condition属性。treeId树ID，condition是查询条件，树状列表上部查询框提供的节点名称查询条件
     * @param treeId树ID
     * @returns
     */
    treeSearchAndExpand: function (searchObj) {
        var treeObj = $.fn.zTree.getZTreeObj(searchObj.treeId);
        // <1>. 先把全部节点更新为普通样式
        var treeNodes = treeObj.transformToArray(treeObj.getNodes());
        for (var i = 0; i < treeNodes.length; i++) {
            treeNodes[i].highlight = false;
            treeObj.updateNode(treeNodes[i]);
        }
        // <2>.得到模糊匹配搜索条件的节点数组集合
        var highlightNodes = new Array();

        if (searchObj.condition != "") {
            highlightNodes = treeObj.getNodesByParamFuzzy("name", searchObj.condition, null);
        } else {
            return;
        }
        // <3>.高亮显示并展示【指定节点s】
        var nodeObj = {};
        if (highlightNodes != null && highlightNodes.length > 0) {
            treeObj.cancelSelectedNode();
            var first = true;
            for (var i = 0; i < highlightNodes.length; i++) {
                if (searchObj.type && searchObj.type.indexOf(highlightNodes[i].type) < 0) {
                    continue;
                }
                // treeObj.selectNode(highlightNodes[i], true);
                highlightNodes[i].highlight = true;
                if (first) {
                    nodeObj = highlightNodes[i];
                    treeObj.selectNode(highlightNodes[i], true);
                    first = false;
                }
                treeObj.updateNode(highlightNodes[i]);// 级联选中
                treeObj.expandNode(highlightNodes[i].getParentNode(), true);
            }
        }
        return nodeObj;
    },
});