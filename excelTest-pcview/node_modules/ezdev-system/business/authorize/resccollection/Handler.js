import Handler from "ezdev-pcview/handler/BaseHandler";
import Table from "ezdev-pcview/components/table/Table";

export default class extends Handler {


    resolveTpl(tpl) {
        return require("./tpl/" + tpl + ".html");
    }


    indexAfter() {

        this.options = {
            leftTreeId: `${this.mcid}_rescTree`,
            leftTreeUrl: 'system/core/resource/list',
            collectionListTpl: 'list',
            collectionListId: `${this.mcid}_list`,
            collectionListUrl: 'system/collection/list',
            map: {}
        };
        this.initRescTree();
    }


    /**
     * 初始化资源树
     */
    initRescTree() {
        let tree_setting = {
            check: {
                enable: false
            },
            data: {
                simpleData: {
                    enable: true
                }
            },
            callback: {
                onClick: (event, treeId, treeNode) => {
                    if (treeNode.type === 'resource') {
                        this.getAllCollections();
                        this.selResc(treeNode.id);
                        $(`#${this.mcid}_currentRescName`).text(treeNode.name);
                    }
                }
            },
            view: {
                fontCss: (treeId, treeNode) => {
                    return (!!treeNode.highlight) ? {color: "blue", "font-weight": "bold"} : {
                        color: "#000", "font-weight": "normal"
                    };
                }
            }
        };

        $.ajax({
            cache: false,
            async: false,
            type: "POST",
            url: this.options.leftTreeUrl,
            dataType: "json",
            success: (data) => {

                //更改用户节点图标
                let nodes = data.data;

                //生成树
                $.fn.zTree.init($(`#${this.options.leftTreeId}`), tree_setting, nodes);

                //默认选中第一个用户
                this.zTree = $.fn.zTree.getZTreeObj(this.options.leftTreeId);

                nodes = this.zTree.getNodesByParam("type", "bizsys");
                this.zTree.selectNode(nodes[0], true);

                //展开选中节点
                this.zTree.expandNode(nodes[0].getParentNode(), true, false, false);

                //保存按钮是否显示
                if (data.data.length === 0) {
                    $(`#${this.mcid}_save_btn`).attr('disabled', true);
                } else {
                    $(`#${this.mcid}_save_btn`).attr('disabled', false);
                }

                let defaultNode = nodes[0];

                //获取全部的数据表
                this.getAllCollections();
                this.selResc(defaultNode.id);
                $(`#${this.mcid}_currentRescName`).text(defaultNode.name);
            }
        });
    }

    /**
     * 取消按钮
     */
    bindReset() {
        let checkedNode = this.zTree.getSelectedNodes();
        this.getAllCollections();
        this.selResc(checkedNode[0].id);
    }

    /**
     * 获取全部数据表
     */
    getAllCollections() {
        let args = {
            tpl: this.options.collectionListTpl,
            url: this.options.collectionListUrl,
            contentId: this.options.collectionListId
        };
        this.search(args);
    }

    /**
     * 点击树节点，执行的方法
     */
    selResc(rescid) {

        if (!rescid) {
            $(`#${this.mcid}_btnSure`).attr('disabled', true);
        } else {
            $(`#${this.mcid}_btnSure`).attr('disabled', false);
        }

        $(`#${this.mcid}_currentRescId`).val(rescid);

        // 清除选中记录
        this.options.map = {};

        let ids = this.options.map;
        if (rescid) {

            $.ajax({
                cache: false,
                async: true,
                type: "GET",
                url: `system/core/resource/collectionsbyrescid/${rescid}`,
                dataType: "json",
                success: (data) => {
                    if (data.data.length > 0) {

                        for (let i = 0; i < data.data.length; i++) {

                            $(`#${data.data[i].id}`).attr('checked', true);
                            ids[data.data[i].id] = data.data[i].id;
                        }
                    }
                }
            });
        }
    }

    /**
     * 提交保存
     */
    bindCollections() {
        let colections = '';
        $('table input[type="checkbox"]').each(function () {

            if ($(this).prop("checked")) {

                colections += $(this).val() + ',';
            }

        })


        let checkedNode = this.zTree.getSelectedNodes();
        let rescId = checkedNode[0].id;

        let param = {"rescid": rescId, "collectionsid": colections};
        let url = "system/core/authorize/bindresccollections";
        $.ajax({
            cache: false,
            data: param,
            type: "POST",
            url: url,
            dataType: "json",
            success: (data) => {
                this.initRescTree();
            }
        });
    }

    /**
     * 实现查询功能
     * @param args
     * {url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}
     */
    search(args) {
        args.form = `${this.mcid}_searchForm`;
        if (args.url) {

            let form = $(`#${args.form}`);

            if (form.length > 0) {

                args.data = form.serialize();

                return this.render(args).then((data) => {
                    new Table({
                        pageNum: data.data.pageNum,
                        totalPages: data.data.totalPages,
                        totalSize: data.data.totalSize,
                        pageSize: data.data.pageSize,
                        buttonClickCallback: this.search.bind(this, args)
                    });
                });
            } else {
                throw new Error("参数无效，DOM中无法找到id为[" + args.form + "]的Form！");
            }
        } else {
            throw new Error("参数无效，请传递如{url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}的JS对象");
        }
    }

    /**
     * zTree上部的查询框
     * @param element
     */
    searchZtree() {

        let searchConditionId = `${this.mcid}_txtSearch`;
        let searchCondition = $('#' + searchConditionId).val();
        let searchObj = {};

        searchObj.condition = searchCondition;
        searchObj.type = "resource,bizsys";

        //获得选择的那个节点
        let nodeObj = this.treeSearchAndExpand(searchObj);
        if (nodeObj && nodeObj.id) {
            if (nodeObj.id) {
                this.getAllCollections();
                this.selResc(nodeObj.id);
                $(`#${this.mcid}_currentRescName`).text(nodeObj.name);
            } else {
            }
        } else {
            layer.msg("没有查询到指定的资源！");
        }
    }

    /**
     * 树状列表查询后展示方法
     *
     * @param
     * searchObj,查询条件对象，内部含有treeId和condition属性。treeId树ID，condition是查询条件，树状列表上部查询框提供的节点名称查询条件
     * @param treeId树ID
     * @returns
     */
    treeSearchAndExpand(searchObj) {

        let treeObj = this.zTree;

        let treeNodes = treeObj.transformToArray(treeObj.getNodes());
        for (let i = 0; i < treeNodes.length; i++) {
            treeNodes[i].highlight = false;
            treeObj.updateNode(treeNodes[i]);
        }

        let highlightNodes = [];

        if (searchObj.condition !== "") {
            highlightNodes = treeObj.getNodesByParamFuzzy("name", searchObj.condition, null);
        } else {
            return;
        }

        let nodeObj = {};
        if (highlightNodes != null && highlightNodes.length > 0) {
            treeObj.cancelSelectedNode();
            let first = true;
            for (let i = 0; i < highlightNodes.length; i++) {
                if (searchObj.type && searchObj.type.indexOf(highlightNodes[i].type) < 0) {
                    continue;
                }

                highlightNodes[i].highlight = true;
                if (first) {
                    nodeObj = highlightNodes[i];
                    treeObj.selectNode(highlightNodes[i], true);
                    first = false;
                }
                treeObj.updateNode(highlightNodes[i]);// 级联选中
                treeObj.expandNode(highlightNodes[i].getParentNode(), true);
            }
        }
        return nodeObj;
    }
}