import Handler from "ezdev-pcview/handler/Handler";

export default new Handler({
    initHandler : function () {
        this.options = {
            leftId: 'leftcontent',
            rightId: 'rightcontent',
            postTreeId: 'post_tree',
            postTreeUrl: 'system/core/post/query',
            userTreeId:'orguserTree',
            userTreeUrl:'system/core/user/orgusertree'
        };
        return this;
    },
    resolveTpl: function (tpl) {
        return require("./tpl/" + tpl + ".html");
    },
    initPostTree : function () {
        let config = {
            check : {
                enable : false
            },
            data : {
                simpleData : {
                    enable  : true,
                    idKey   : "code",
                    pIdKey  : "pCode",
                    rootPId : null
                }
            },
            callback : {
                onClick : function (event, treeId, treeNode){
                    this.postNodeClick(treeNode.id,treeNode.name);
                }.bind(this),
                beforeClick: function(treeId, treeNode){
                    if(treeNode.id=="root"){
                        return false;
                    }
                }.bind(this)
            },
            view :{
                fontCss: function(treeId, treeNode){
                    return (!!treeNode.highlight) ? {color:"blue", "font-weight":"bold"} : {color:"#000", "font-weight":"normal"};
                }
            }
        };

        $.ajax({
            cache      : false,
            async      : false,// 同步加载
            type       : "POST",
            url        : this.options.postTreeUrl,
            dataType   : "json",
            success    : function(data) {
                $.fn.zTree.init($('#' + this.options.postTreeId),config, data.data);
                var zTree = $.fn.zTree.getZTreeObj(this.options.postTreeId);
                var nodes = zTree.getNodesByFilter(this.filter);
                // 默认选中第一个非根节点数据
                zTree.selectNode(nodes[0], true);
                zTree.expandNode(nodes[0].getParentNode(), true, false, false);  //展开选中节点
                let postId = nodes[0].id;
                let postName = nodes[0].name;
                this.postNodeClick(postId,postName);
            }.bind(this)
        });
    },

    filter : function(node){
        return node.id != 'root';
    },

    /**
     * 初始化用户树tree
     */
    initUserTree: function () {
        var config = {
            check: {
                enable: true,
                chkboxType: { "Y" : "ps", "N" : "ps" }
            },
            data: {
                simpleData: {
                    enable: true
                }
            }
        };
        $.ajax({
            cache : false,
            async : false,// 同步加载
            type : "POST",
            url : this.options.userTreeUrl,
            dataType : "json",
            success : function(data) {
                var nodes=data.data;
                $.each(nodes,function(i,item){
                    if(item.type=='user'){
                        item.iconSkin="user";
                    }
                });
                $.fn.zTree.init($('#' + this.options.userTreeId),config, nodes);
                var zTree = $.fn.zTree.getZTreeObj(this.options.userTreeId);
                //zTree.expandAll(true);//全部展开
                var root = zTree.getNodesByFilter(function (node) { return node.level == 0 }, true);
                zTree.expandNode(root, true, false, false);  //默认展开第一级
            }.bind(this)
        });
    },

    /**
     * 点击岗位树
     */
    postNodeClick :function(postId,postName){

        // 右侧显示 为 ** 岗位 绑定用户 值设置
        $("#currentPostId").val(postId);
        $("#currentPostName").text(postName);
        if(postId){
            var url = "system/core/post/usersbinded/"+postId;
            $.ajax({
                cache      : false,
                async      : false,// 同步加载
                type       : "GET",
                url        :  url,
                dataType   : "json",
                success    : function(data) {
                                let userTree = $.fn.zTree.getZTreeObj(this.options.userTreeId);
                                userTree.checkAllNodes(false); //用户树选择状态初始化
                                if(data.data.length>0){
                                    $.each( data.data,function(i,item) {
                                        let node = userTree.getNodeByParam("id",item.id);
                                        if(node){
                                            node.checked=true;
                                            userTree.expandNode(node.getParentNode(), true, false, false);  //展开选中节点
                                            userTree.updateNode(node,true);//父节点级联选中

                                        }
                                    }.bind(this));
                                }
                }.bind(this)
            });
        }
    },

    /**
     * 保存资源用户绑定信息
     */
    bindUsers:function(){
        //右侧选中用户
        var treeObj = $.fn.zTree.getZTreeObj(this.options.userTreeId);
        var chknodes = treeObj.getCheckedNodes(true);
        var bindnodes="";
        $.each(chknodes,function( i,item) {
            if(item.type=='user'){
                bindnodes+= item.id+",";
            }

        });
        //左侧选中岗位
        var postId= $("#currentPostId").val();
        var postName = $("#currentPostName").text();
        if(postId == "" || typeof (postId) == undefined){
            layer.msg(`请选择绑定的岗位`);
            return;
        }
        var param = {"postId":postId,userids:bindnodes};
        var url="system/core/authorize/bindpostuser";
        $.ajax({
            cache : false,
            data:param,
            type : "POST",
            url : url,
            dataType : "json",
            success : function(data) {
                this.postNodeClick(postId,postName);
            }.bind(this)
        });
    },
    bindReset:function(){
		//默认选中第一个资源
        var postId= $("#currentPostId").val();
        var postName= $("#currentPostName").text();

        //显示用户的绑定角色
        this.postNodeClick(postId, postName);
    },
    onIndexed : function () {
        this.initHandler();
        this.initUserTree();
        this.initPostTree();
    },
    searchZtree: function (element) {
        var treeId = this.options.postTreeId;
        var searchConditionId = "txtSearch";
        var searchCondition = $('#' + searchConditionId).val();
        var searchObj = {};
        searchObj.treeId = treeId;
        // searchObj.type = 'resource,bizsys';
        searchObj.condition = searchCondition;
        //获得选择的那个节点
        var nodeObj = this.treeSearchAndExpand(searchObj);
        if (nodeObj&&nodeObj.id) {
            this.postNodeClick(nodeObj.id,nodeObj.name);
            //this.selUser(nodeObj.id, nodeObj.name,nodeObj.approvalType);
        }else{
            layer.msg(`没有查询到指定的岗位！`);
        }
    },

    /**
     * 树状列表查询后展示方法
     *
     * @param
     * searchObj,查询条件对象，内部含有treeId和condition属性。treeId树ID，condition是查询条件，树状列表上部查询框提供的节点名称查询条件
     * @param treeId树ID
     * @returns
     */
    treeSearchAndExpand: function (searchObj) {
        var treeObj = $.fn.zTree.getZTreeObj(searchObj.treeId);
        // <1>. 先把全部节点更新为普通样式
        var treeNodes = treeObj.transformToArray(treeObj.getNodes());
        for (var i = 0; i < treeNodes.length; i++) {
            treeNodes[i].highlight = false;
            treeObj.updateNode(treeNodes[i]);
        }
        // <2>.得到模糊匹配搜索条件的节点数组集合
        var highlightNodes = new Array();

        if (searchObj.condition != "") {
            highlightNodes = treeObj.getNodesByParamFuzzy("name", searchObj.condition, null);
        } else {
            return;
        }
        // <3>.高亮显示并展示【指定节点s】
        var nodeObj = {};
        if (highlightNodes != null && highlightNodes.length > 0) {
            treeObj.cancelSelectedNode();
            var first = true;
            for (var i = 0; i < highlightNodes.length; i++) {
                if (searchObj.type && searchObj.type.indexOf(highlightNodes[i].type) < 0) {
                    continue;
                }
                // treeObj.selectNode(highlightNodes[i], true);
                highlightNodes[i].highlight = true;
                if (first) {
                    nodeObj = highlightNodes[i];
                    treeObj.selectNode(highlightNodes[i], true);
                    first = false;
                }
                treeObj.updateNode(highlightNodes[i]);// 级联选中
                treeObj.expandNode(highlightNodes[i].getParentNode(), true);
            }
        }
        return nodeObj;
    }
});