/**
 * Created by zhaofs on 2017/5/6.
 * 演示Handler应用
 */
import Handler from "ezdev-pcview/handler/Handler";

export default new Handler({
    options1: function () {
        this.options = {
            leftId: 'leftcontent',
            rightId: 'rightcontent',
            leftTreeId: 'orguserTree',
            leftTreeUrl: 'system/core/user/orgusertree',
            rightTreeid:'rescTree',
            rightTreeUrl:'system/core/resource/list',
            lastIds: ''
        };
        return this;
    },

    resolveTpl: function (tpl) {
        return require("./tpl/" + tpl + ".html");
    },

    onIndexed: function () {
        this.options1();
        this.initUserTree();

        this.initRescTree();
    },

    /**
     * 初始化用户树tree
     */
    initUserTree: function () {
        var tree_setting = {
            check: {
                enable: false
            },
            data: {
                simpleData: {
                    enable: true
                }
            },
            callback: {
                onClick: function (event, treeId, treeNode) {
                    if (treeNode.type == 'user') {
                        this.selUser(treeNode.id, treeNode.name, treeNode.approvalRoleType);
                        // this.searchRoleList();
                    }
                }.bind(this),
                beforeClick: function (treeId, treeNode) {
                    if (treeNode.type == "org") {
                        return false;
                    }
                }.bind(this)
            }/*,
            view: {
                fontCss: function (treeId, treeNode) {
                    return (!!treeNode.highlight) ? {color: "blue", "font-weight": "bold"} : {
                        color: "#000", "font-weight": "normal"
                    };
                }
            }*/
        };

        $.ajax({
            cache: false,
            async: false,// 同步加载
            type: "POST",
            url: this.options.leftTreeUrl,
            dataType: "json",
            success: function (data) {
                //更改用户节点图标
                var nodes = data.data;
                for (var i = 0; i < nodes.length; i++) {
                    if (nodes[i].type == 'user') {
                        nodes[i].iconSkin = "user";
                    }
                }
                //生成树
                $.fn.zTree.init($('#' + this.options.leftTreeId), tree_setting, nodes);
                var zTree = $.fn.zTree.getZTreeObj(this.options.leftTreeId);
               /* var nodes = zTree.getNodesByParam("type", "user");
                zTree.selectNode(nodes[0], true);
                zTree.expandNode(nodes[0].getParentNode(), true, false, false);  //展开选中节点
                //保存按钮是否显示
                if (data.data.length == 0) {
                    $("#" + this.options.rightId + " #btnSure").attr('disabled', true);
                } else {
                    $("#" + this.options.rightId + " #btnSure").attr('disabled', false);
                }
                var defaultNode = nodes[0];
                this.getAllroles(defaultNode.id);//获取全部的角色
                this.selUser(defaultNode.id,defaultNode.name,defaultNode.approvalRoleType);*/
                if(data.data.length == 0){
                    $("#"+this.options.rightId+" #btnSure").attr('disabled',true);
                }else{
                    $("#"+this.options.rightId+" #btnSure").attr('disabled',false);
                }
                //获取默认人员的角色并显示
            }.bind(this)
        });
    },
    /**
     * 点击角色，取得授权用户，更新用户tree
     */
    initRescTree : function(args) {

        var tree_setting = {
            check : {
                enable : true,
                chkboxType: { "Y" : "ps", "N" : "s" }
            },
            data : {
                simpleData : {
                    enable : true
                }
            }
        };
        $.ajax({
            cache : false,
            async : false,// 同步加载
            type : "POST",
            url : this.options.rightTreeUrl,
            dataType : "json",
            success : function(data) {
                //资源数初始化操作
                $.fn.zTree.init($('#' + this.options.rightTreeid),tree_setting, data.data);
                var zTree = $.fn.zTree.getZTreeObj(this.options.rightTreeid);
                //zTree.expandAll(true);
                var root = zTree.getNodesByFilter(function (node) { return node.level == 0 }, true);
                zTree.expandNode(root, true, false, false);  //默认展开第一级
                //用户树操作。默认选中第一个用户
                var zTree = $.fn.zTree.getZTreeObj(this.options.leftTreeId);
                var nodes = zTree.getNodesByParam("type", "user");
                zTree.selectNode(nodes[0], true);
                this.selUser(nodes[0].id, nodes[0].name,nodes[0].approvalType);
                zTree.expandNode(nodes[0].getParentNode(), true, false, false);  //展开选中节点
            }.bind(this)
        });
    },

    /**
     * 获取全部角色
     */
    getAllroles: function () {
        let args = {
            tpl: "list",
            url: "/system/core/role/list",
            contentId: "list"
        };
        this.search(args);
    },

    /**
     * 点击用户，取得授权角色，放入角色缓存中
     */
    selUser: function (userid, username, approvalRoleType) {
        if(!userid){
            $("#"+this.options.rightId+" #btnSure").attr('disabled',true);
        }else{
            $("#"+this.options.rightId+" #btnSure").attr('disabled',false);
        }
      /*  alert(approvalType);
        if(approvalType == "1"){

            $("#"+this.options.rightId+" #btnSure").attr('disabled',true);
            $("#"+this.options.rightId+" #btnSure").html('待审批');

        }else{
            $("#"+this.options.rightId+" #btnSure").attr('disabled',false);
            $("#"+this.options.rightId+" #btnSure").html('保存');
        }*/


        $("#"+this.options.rightId+" #hidUserid").val(userid);
        $("#"+this.options.rightId+" #spnCurUser").text(username);
        //$("#"+this.options.rightId+" #hidApprovalType").val(approvalType);
        if(userid){
            var url = "system/core/user/rescsbyuserid/"+userid;
            $.ajax({
                cache : false,
                async : false,// 同步加载
                type : "GET",
                url : url,
                dataType : "json",
                success : function(data) {
                    var zTree = $.fn.zTree.getZTreeObj(this.options.rightTreeid);
                    zTree.checkAllNodes(false); //用户数选择状态初始化
                    if(data.data.length>0){
                        $.each(data.data,function(i, item) {

                            var node = zTree.getNodeByParam("id",item.id);
                            if(node){
                                node.checked=true;
                                //zTree.updateNode(node,true);//级联选中
                                zTree.updateNode(node);
                                zTree.expandNode(node.getParentNode(), true, false, false);  //展开选中节点
                            }

                        }.bind(this));
                    }

                    var chknodes = zTree.getCheckedNodes(true);

                    var nodes="";
                    $.each(chknodes,function( i,item) {
                        if(item.type!='root'){
                            nodes+= item.id+",";
                        }

                    });

                    this.options.lastIds = nodes;

                }.bind(this)
            });
        }
    },


//     searchRoleList: function () {
//         var data = $("#" + this.options.searchFormId).serialize();
//         Utils.ajaxByPost({
//             url: this.options.roleListUrl,
//             tplUrl: 'system/core/authorize/rolelistbind',
//             contentId: this.options.roleListId,
//             data: data,
//             calback: function (data) {
//                 //没有数据时处理最大页数
//                 var maxpage = parseInt(data.data.totalPages);
//                 var curpage = parseInt(data.data.number) + 1;
//                 if (maxpage == 0) {
//                     maxpage = 1;
//                 }
//                 //回写最大页数
//                 $(".pagination").jqPagination("option", {
//                     max_page: maxpage,
//                     current_page: curpage,
//                     trigger: false
//                 });
//
//                 $('#' + this.options.roleListId + "input").iCheck({
//                     handle: 'checkbox',
//                     checkboxClass: 'icheckbox_square-blue',
//                     radioClass: 'iradio_square-blue',
//                     increaseArea: '20%' // optional
//                 });
//
//
//                 var rolechk = $('#' + this.options.roleListId + " input:checkbox:not([id='selectAll'])");
//                 var main = this;
//                 //显示资源的绑定角色
//                 if (main.options.map.size() > 0) {
//                     //设置选中用户的状态
//                     rolechk.each(function () {
//                         if (main.options.map.containsKey($(this).attr('objid'))) {
//                             $(this).iCheck('check');
//                         }
//                     });
//                 }
//                 //添加checkbox的选中事件，如果选中则加入缓存中
//                 rolechk.on('ifChecked', function (event) {
//                     var chk = event.target;
//                     main.options.map.put($(chk).attr('objid'), $(chk).attr('objname'));
//                 });
//                 //添加checkbox的选中事件，如果选中则加入缓存中
//                 rolechk.on('ifUnchecked', function (event) {
//                     var chk = event.target;
//                     main.options.map.remove($(chk).attr('objid'));
//                 });
//                 //全选操作
//                 var selectAllChk = $('#' + this.options.roleListId + " input:checkbox#selectAll");
//                 selectAllChk.on('ifChecked', function (event) {
//                     rolechk.iCheck('check');
// //						  rolechk.each(function(){
// //							  main.options.map.put($(this).attr('objid'),$(this).attr('objname'));
// //						  });
//
//                 });
//                 selectAllChk.on('ifUnchecked', function (event) {
//                     rolechk.iCheck('uncheck');
// //						  rolechk.each(function(){
// //							  main.options.map.remove($(this).attr('objid'));
// //						  });
//                 });
//             }.bind(this)
//         });
//     },


    searchNodes: function () {

    },


    /**
     * ------------------------------------zTree上部的查询框和查询----------------------------------
     * TODO 获取选择的节点
     * TODO 查询全部的角色
     * TODO 查询这个节点的角色
     */

    /**
     * zTree上部的查询框
     * @param element
     */
    searchZtree: function (element) {
        var treeId = "orguserTree";
        var searchConditionId = "txtSearch";
        var searchCondition = $('#' + searchConditionId).val();
        var searchObj = {};
        searchObj.treeId = treeId;
        searchObj.condition = searchCondition;
        searchObj.type="user";
        //获得选择的那个节点
        var nodeObj = this.treeSearchAndExpand(searchObj);
        if (nodeObj&&nodeObj.id) {
            this.selUser(nodeObj.id, nodeObj.name,nodeObj.approvalType);
        }else{
            layer.msg(`没有查询到指定的用户！`);
        }
    },

    /**
     * 树状列表查询后展示方法
     *
     * @param
     * searchObj,查询条件对象，内部含有treeId和condition属性。treeId树ID，condition是查询条件，树状列表上部查询框提供的节点名称查询条件
     * @param treeId树ID
     * @returns
     */
    treeSearchAndExpand: function (searchObj) {
        var treeObj = $.fn.zTree.getZTreeObj(searchObj.treeId);
        // <1>. 先把全部节点更新为普通样式
        var treeNodes = treeObj.transformToArray(treeObj.getNodes());
        for (var i = 0; i < treeNodes.length; i++) {
            treeNodes[i].highlight = false;
            treeObj.updateNode(treeNodes[i]);
        }
        // <2>.得到模糊匹配搜索条件的节点数组集合
        var highlightNodes = new Array();

        if (searchObj.condition != "") {
            highlightNodes = treeObj.getNodesByParamFuzzy("name", searchObj.condition, null);
        } else {
            return;
        }
        // <3>.高亮显示并展示【指定节点s】
        var nodeObj = {};
        if (highlightNodes != null && highlightNodes.length > 0) {
            treeObj.cancelSelectedNode();
            var first = true;
            for (var i = 0; i < highlightNodes.length; i++) {
                if (searchObj.type && searchObj.type.indexOf(highlightNodes[i].type) < 0) {
                    continue;
                }
                // treeObj.selectNode(highlightNodes[i], true);
                highlightNodes[i].highlight = true;
                if (first) {
                    nodeObj = highlightNodes[i];
                    treeObj.selectNode(highlightNodes[i], true);
                    first = false;
                }
                treeObj.updateNode(highlightNodes[i]);// 级联选中
                treeObj.expandNode(highlightNodes[i].getParentNode(), true);
            }
        }
        return nodeObj;
    },
    /**
     * 保存用户资源绑定信息
     */
    bindRescs:function(){
        //选中资源
        var treeObj = $.fn.zTree.getZTreeObj(this.options.rightTreeid);
        var chknodes = treeObj.getCheckedNodes(true);
        var bindnodes="";
        $.each(chknodes,function( i,item) {
            if(item.type!='root'){
                bindnodes+= item.id+",";
            }
        });
        if(this.options.lastIds == bindnodes){
            layer.msg("绑定无变化，不可提交。");
            return;
        }
        //选中用户
        var userid= $("#"+this.options.rightId+" #hidUserid").val();
        if(userid.length==0){
            //$('#deleteMore').removeClass('active').attr("disabled", true);
            //TODO:替换为标准提示框
            //alert('请选择绑定的用户');
            layer.msg("请选择绑定的用户！");
            return;
        }
        var param = {"userid":userid,"rescids":bindnodes};
        var url="system/core/authorize/binduserrescs";
        $.ajax({
            cache : false,
            data:param,
            type : "POST",
            url : url,
            dataType : "json",
            success : function(data) {
                layer.msg("绑定成功！");
                /* 20170925suntf
                this.initUserTree();
                this.initRescTree();

                */
            }.bind(this)
        });
    },
    bindReset:function(){
        //默认选中第一个用户
        var rescid= $("#"+this.options.rightId+" #hidUserid").val();
        var approvalType = $("#"+this.options.rightId+" #hidApprovalType").val();
        var rescname= $("#"+this.options.rightId+" #spnCurUser").text();
        //显示用户的绑定角色
        this.selUser(rescid, rescname,approvalType);
    }
});