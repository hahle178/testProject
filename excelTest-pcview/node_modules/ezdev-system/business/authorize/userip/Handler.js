/**
 * 用户IP地址绑定
 *
 */
import Handler from "ezdev-pcview/handler/Handler";

export default new Handler({
    /**
     * 初始化常量
     * 注意：本Handler中，search方法中,zTree的ID已固定，如若更改zTreeId，请一起更新。
     * @returns {options1}
     */
    options1: function () {
        this.options = {
            leftId: 'leftcontent',
            rightId: 'rightcontent',
            leftTreeId: 'orguserTree',
            submitForm: 'searchForm',
            leftTreeUrl: 'system/core/user/orgusertree',
            map: {},
            lastIds: ''
        };
        return this;
    },

    resolveTpl: function (tpl) {
        return require("./tpl/" + tpl + ".html");
    },

    onIndexed: function () {
        this.options1();
        this.initUserTree();
    },

    /**
     * 初始化用户树tree
     */
    initUserTree: function () {
        var tree_setting = {
            check: {
                enable: false
            },
            data: {
                simpleData: {
                    enable: true
                }
            },
            callback: {
                onClick: function (event, treeId, treeNode) {
                    if (treeNode.type == 'user') {
                        this.getIpBinds(treeNode.id,treeNode.name);
                    }
                }.bind(this),
                beforeClick: function (treeId, treeNode) {
                    if (treeNode.type == "org") {
                        return false;
                    }
                }.bind(this)
            },
            view: {
                fontCss: function (treeId, treeNode) {
                    return (!!treeNode.highlight) ? {color: "blue", "font-weight": "bold"} : {
                        color: "#000", "font-weight": "normal"
                    };
                }
            }
        };

        $.ajax({
            cache: false,
            async: false,// 同步加载
            type: "POST",
            url: this.options.leftTreeUrl,
            dataType: "json",
            success: function (data) {
                //更改用户节点图标
                var nodes = data.data;
                for (var i = 0; i < nodes.length; i++) {
                    if (nodes[i].type == 'user') {
                        nodes[i].iconSkin = "user";
                    }
                }
                //生成树
                $.fn.zTree.init($('#' + this.options.leftTreeId), tree_setting, nodes);
                //默认选中第一个用户
                var zTree = $.fn.zTree.getZTreeObj(this.options.leftTreeId);
                var nodes = zTree.getNodesByParam("type", "user");
                zTree.selectNode(nodes[0], true);
                zTree.expandNode(nodes[0].getParentNode(), true, false, false);  //展开选中节点
                var defaultNode = nodes[0];
                var id = defaultNode.id;
                var name = defaultNode.name;
                //获取全部的角色
                this.getIpBinds(id,name);
            }.bind(this)
        });
    },

    getIpBinds : function (userId,userName) {
        let args = {
          tpl : "detail",
          url : "system//core/authorize/ipbinds/" + userId,
          contentId : "detail"
        };
        $("#currentUser").text(userName);
        this.render(args);
    },


    /**
     * 取消选择
     */
    bindReset: function () {
        var zTree = $.fn.zTree.getZTreeObj(this.options.leftTreeId);
        var checkedNode = zTree.getSelectedNodes();
        this.getAllroles();
        this.selUser(checkedNode[0].id);
    },

    /**
     * 实现查询功能
     * @param args
     * {url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}
     */
    search(args) {
        var main = this;
        args.form = args.form || 'searchForm';
        if (args.url) {
            args.contentId = args.contentId || config.listId;
            let form = $(`#${args.form}`);
            if (form.length > 0) {
                args.data = form.serialize();
                args.tpl = args.tpl || config.listTpl;
                return this.render(args).then(function (data) {
                    new Table({
                        pageNum: data.data.pageNum,
                        totalPages: data.data.totalPages,
                        totalSize: data.data.totalSize,
                        pageSize: data.data.pageSize,
                        buttonClickCallback: this.search.bind(this, args)
                    });
                }.bind(this)).then(
                    setTimeout(function () {
                        var ids = main.options.map;
                        var allRoles = document.getElementsByName("roles");
                        for (var i = 0; i < allRoles.length; i++) {
                            if (ids[allRoles[i].id] != null) {
                                $("#" + allRoles[i].id).attr('checked', true);
                            }
                        }
                    }, 100)
                );
            } else {
                throw new Error("参数无效，DOM中无法找到id为[" + args.form + "]的Form！");
            }
        } else {
            throw new Error("参数无效，请传递如{url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}的JS对象");
        }
    },

    /**
     * zTree上部的查询框
     * @param element
     */
    searchZtree: function (element) {
        var treeId = "orguserTree";
        var searchConditionId = "txtSearch";
        var searchCondition = $('#' + searchConditionId).val();
        var searchObj = {};
        searchObj.treeId = treeId;
        searchObj.condition = searchCondition;
        searchObj.type = "user"
        //获得选择的那个节点
        var nodeObj = this.treeSearchAndExpand(searchObj);
        if (nodeObj && nodeObj.id) {
            if (nodeObj.id) {
                // 查询这个节点的角色
                this.getIpBinds(nodeObj.id,nodeObj.name);
            } else {
            }
        } else {
            layer.msg("没有查询到指定的用户！");
        }
    },

    /**
     * 树状列表查询后展示方法
     */
    treeSearchAndExpand: function (searchObj) {
        var treeObj = $.fn.zTree.getZTreeObj(searchObj.treeId);
        // <1>. 先把全部节点更新为普通样式
        var treeNodes = treeObj.transformToArray(treeObj.getNodes());
        for (var i = 0; i < treeNodes.length; i++) {
            treeNodes[i].highlight = false;
            treeObj.updateNode(treeNodes[i]);
        }
        // <2>.得到模糊匹配搜索条件的节点数组集合
        var highlightNodes = new Array();

        if (searchObj.condition != "") {
            highlightNodes = treeObj.getNodesByParamFuzzy("name", searchObj.condition, null);
        } else {
            return;
        }
        // <3>.高亮显示并展示【指定节点s】
        var nodeObj = {};
        if (highlightNodes != null && highlightNodes.length > 0) {
            treeObj.cancelSelectedNode();
            var first = true;
            for (var i = 0; i < highlightNodes.length; i++) {
                if (searchObj.type && searchObj.type.indexOf(highlightNodes[i].type) < 0) {
                    continue;
                }
                // treeObj.selectNode(highlightNodes[i], true);
                highlightNodes[i].highlight = true;
                if (first) {
                    nodeObj = highlightNodes[i];
                    treeObj.selectNode(highlightNodes[i], true);
                    first = false;
                }
                treeObj.updateNode(highlightNodes[i]);// 级联选中
                treeObj.expandNode(highlightNodes[i].getParentNode(), true);
            }
        }
        return nodeObj;
    },
    
    bindIp : function () {
        let ipAddress = $("#ip_address").val();
        if(ipAddress == "" || typeof (ipAddress) == undefined){
            lay.msg("请输入IP地址");
            return;
        }
        var zTree = $.fn.zTree.getZTreeObj(this.options.leftTreeId);
        var checkedNode = zTree.getSelectedNodes();
        var userid = checkedNode[0].id;
        let mac = $("#mac").val();
        let data = {};
        data.ipAddress = ipAddress;
        data.mac = mac;
        data.userid = userid;
        let url = "/system/core/authorize/bindip"
        $.ajax({
            cache: false,
            data : data,
            type: "POST",
            url: url,
            dataType: "json",
            success: function (data) {

            }.bind(this)
        });

    }
});