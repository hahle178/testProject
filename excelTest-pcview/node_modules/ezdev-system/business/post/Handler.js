import Handler from "ezdev-pcview/handler/Handler";
import ComponentManager from "ezdev-pcview/components/ComponentManager";
export default new Handler({
    
    initHandler : function () {
        this.options = {
            treeId : "tree_id",
            contentId : "list",
            findTree  : "/system/core/post/query"
        }
    },

    resolveTpl: function (tpl) {
        return require("./tpl/" + tpl + ".html");
    },

    initTree : function () {
        let treeConfig = {
            check : {
                enable : false
            },
            data : {
                simpleData : {
                    enable  : true,
                    idKey   : "code",
                    pIdKey  : "pCode",
                    rootPId : null
                }
            },
            callback : {
                onClick : function(event, treeId, treeNode) {
                    var nodeid = treeNode.id;
                    this.triggerOperation(nodeid);
                }.bind(this)
            },
            view :{
                fontCss: function(treeId, treeNode){
                    return (!!treeNode.highlight) ? {color:"blue", "font-weight":"bold"} : {color:"#000", "font-weight":"normal"};
                }
            }
        };

        $.ajax({
            cache      : false,
            async      : false,// 同步加载
            type       : "POST",
            url        :  this.options.findTree,
            dataType   :  "json",
            success    :  function(data) {
                // 初始化树组件
                $.fn.zTree.init($('#' + this.options.treeId),
                    treeConfig, data.data);
                // 选中树的第一级的第一个节点
                var zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
                var node = zTree.getNodeByParam("id", "root");
                zTree.selectNode(node, false);
                var nodes = zTree.getSelectedNodes();
                var nodeid = nodes[0].id;
                this.triggerOperation(nodeid);
                //zTree.expandAll(true);

                zTree.expandNode(node, true, false, false);  //默认展开第一级
            }.bind(this)
        });


    },
    onIndexed : function () {
        this.initHandler();
        this.initTree();
        //select.reWriteHtml(dataArgs);

    },
    onEdited : function(){
        var zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
        var selectedNodes = zTree.getSelectedNodes();
        var selectedNode = selectedNodes[0];
        if(selectedNode.id != 'root'){
            var parentLevel = selectedNode.getParentNode().level;
            this.renderLeaderLevel("level",parentLevel);
        }

    },
    triggerOperation : function(nodeid) {
        let args={
            tpl : "detail",
            url:  "/system/core/post/get/"+nodeid,
            contentId:"list"
        }
        this.details(args);//查看详情页面^_^
    },

    /**
     * 跳转到新增页面后的初始化方法
     *
     */
    onAdded : function () {
        /*取选中的节点的信息，新建操作中，这个选中的节点就是父节点！-start*/
        var zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
        var selectedNodes = zTree.getSelectedNodes();
        var selectedNode = selectedNodes[0];
        var nodeName = selectedNode.name;
        var nodeCode = selectedNode.code;
        var parentLevel = selectedNode.level;
        /*取选中的节点的信息，新建操作中，这个选中的节点就是父节点！-end*/
        //add_orgTreeLevel  add_parentId  add_parentName  add_orgCode --> ajaxurl
        //add.html页面赋值
        let url = $("#level").attr("e-url") + "&parentLevel="+parentLevel;
        $("#level").attr("e-url",url);

        $("#parentCode").val(nodeCode);
        $("#parentName").val(nodeName);
        $("#parentLevel").val(parentLevel);
        this.renderLeaderLevel("level",parentLevel);
    },
    renderLeaderType : function(id,account){
        let select =ComponentManager.getComObjectByDomId(id);
        //select.reWriteHtml(dataArgs);
        let getUrl = '/system/core/user/queryposts/'+account;
        select.updateArgs({
            url:getUrl
        });
        select.refresh();
    },
    onSubmited:function(){
        let errSize=$(".has-error").length;
        if(errSize<1){
            //添加完毕后，重新展开树
            this.initTree();
            // 选中编辑的数据
            var zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
            let code=$("#code").val();//【add】页面
            var node = zTree.getNodeByParam("code",code);
            zTree.selectNode(node, false);//选择节点
            this.triggerOperation(node.id);//查看详情
        }
    },
    goBack:function(args){
        let zTree = $.fn.zTree.getZTreeObj(this.options.treeId);
        var nodes = zTree.getSelectedNodes();
        var nodeid = nodes[0].id;
        zTree.selectNode(nodes[0], false);//选择节点
        this.triggerOperation(nodeid);
    },
    searchZtree: function (element) {
        var treeId = this.options.treeId;
        var searchConditionId = "txtSearch";
        var searchCondition = $('#' + searchConditionId).val();
        var searchObj = {};
        searchObj.treeId = treeId;
        // searchObj.type = 'resource,bizsys';
        searchObj.condition = searchCondition;
        //获得选择的那个节点
        var nodeObj = this.treeSearchAndExpand(searchObj);
        if(nodeObj){
            if (nodeObj&&nodeObj.id) {
                this.triggerOperation(nodeObj.id, nodeObj.type);
                this.selUser(nodeObj.id, nodeObj.name,nodeObj.approvalType);
            }else{
                layer.msg(`没有查询到指定的岗位！`);
            }

        }
    },

    /**
     * 树状列表查询后展示方法
     *
     * @param
     * searchObj,查询条件对象，内部含有treeId和condition属性。treeId树ID，condition是查询条件，树状列表上部查询框提供的节点名称查询条件
     * @param treeId树ID
     * @returns
     */
    treeSearchAndExpand: function (searchObj) {
        var treeObj = $.fn.zTree.getZTreeObj(searchObj.treeId);
        // <1>. 先把全部节点更新为普通样式
        var treeNodes = treeObj.transformToArray(treeObj.getNodes());
        for (var i = 0; i < treeNodes.length; i++) {
            treeNodes[i].highlight = false;
            treeObj.updateNode(treeNodes[i]);
        }
        // <2>.得到模糊匹配搜索条件的节点数组集合
        var highlightNodes = new Array();

        if (searchObj.condition != "") {
            highlightNodes = treeObj.getNodesByParamFuzzy("name", searchObj.condition, null);
        } else {
            return;
        }
        // <3>.高亮显示并展示【指定节点s】
        var nodeObj = {};
        if (highlightNodes != null && highlightNodes.length > 0) {
            treeObj.cancelSelectedNode();
            var first = true;
            for (var i = 0; i < highlightNodes.length; i++) {
                if (searchObj.type && searchObj.type.indexOf(highlightNodes[i].type) < 0) {
                    continue;
                }
                // treeObj.selectNode(highlightNodes[i], true);
                highlightNodes[i].highlight = true;
                if (first) {
                    nodeObj = highlightNodes[i];
                    treeObj.selectNode(highlightNodes[i], true);
                    first = false;
                }
                treeObj.updateNode(highlightNodes[i]);// 级联选中
                treeObj.expandNode(highlightNodes[i].getParentNode(), true);
            }
        }
        return nodeObj;
    },
    /*
    delete : function(params){
        let id = params.id;
        let zTree = $.fn.zTree.getZTreeObj("tree_id");
        let selectNode = zTree.getNodeByParam("id",id);
        if(selectNode != null){
            let parentNode = selectNode.getParentNode();
            let args = {};
            args.dialog = "confirm";
            args.type = "get";
            args.url = "/system/core/post/delete/"+params.id;
            args.isReload = 'false';
            let flag = false;
            try{
                this.dialog(args);
                flag = true;
            }catch(e){

            }
            if(flag){
                zTree.removeNode(selectNode);
            }
            this.triggerOperation(parentNode.id);//查看详情
        }
    },
    */
    delete : function(args){
        let promise = null;
        switch (args.dialog) {
            case 'confirm':
                layer.confirm('你确定要执行此操作吗？', {
                    btn: ['确定', '取消'] //按钮
                }, function () {
                    layer.closeAll();
                    promise = this.ajaxResource(args).then(function (data) {
                        let id = args.id;
                        let zTree = $.fn.zTree.getZTreeObj("tree_id");
                        let selectNode = zTree.getNodeByParam("id",id);
                        if(selectNode != null){
                            let parentNode = selectNode.getParentNode();
                            zTree.removeNode(selectNode);
                            zTree.selectNode(parentNode, true);//选择节点
                            this.triggerOperation(parentNode.id);//查看详情

                        }

                    }.bind(this));

                }.bind(this), function () {
                    layer.closeAll()
                });
                break;
            default:  //设置shade,zIndex解决附件上传对话框弹出遮罩层的问题，修改人lvhuwei
                let layerId = layer.open({
                    shade: 0,
                    zIndex: 1,
                    type: 1,
                    move: args.move,
                    title: args.title || '信息',
                    area: [args.width || '800px', args.height || '600px'] //宽高
                });
                args.contentId = $('#layui-layer' + layerId).find('.layui-layer-content');
                promise = this.render(args);
                break;
        }
        return promise;
    },
    renderLeaderLevel : function(id,parentLevel){
        // cacheUtils.push('gwType',null);
        // $('#'+id).removeAttr("e-url");
        // alert(id);
        let select =ComponentManager.getComObjectByDomId(id);
        //select.reWriteHtml(dataArgs);
        let getUrl = '/system/core/dictionary/getSonDicsByCode?code=post_level&parentLevel='+parentLevel;
        select.updateArgs({
            url:getUrl
        });
        select.refresh();
    }
});