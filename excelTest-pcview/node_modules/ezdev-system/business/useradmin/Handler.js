import Handler from "ezdev-pcview/handler/Handler";
import config from "ezdev-pcview/Config";
import Table from "ezdev-pcview/components/table/Table";
import eventUtils from "ezdev-pcview/utils/EvenUtils";
import htmlUtils from "ezdev-pcview/utils/HtmlUtils";

export default new Handler({

    resolveTpl: function (tpl) {
        return require("./tpl/" + tpl + ".html");
    },
    onIndexed: function() {
        this.render({
            type: 'get',
            url: '/system/core/useradmin/tabs',
            tpl: 'tabs',
            contentId: 'systemuseradmin_tabs-div'
        });
    },
    toTab: function (args) {
        if ($("#" + args.contentId).find(".table").length < 1) {
            this.render(args).then(function(data){

            }.bind(this));
        }
    },
    search(args) {
        args.form = args.form || 'searchForm';
        if (args.url) {
            args.contentId = args.contentId || config.listId;

            let form = $(`#${args.form}`);
            if (form.length > 0) {
                args.data = form.serialize();
                args.tpl = args.tpl || config.listTpl;

                return this.render(args).then(function (data) {
                    new Table({
                        pageID: args.contentId + "-pager",
                        sortID: args.contentId + "-sort",
                        pageNum: data.data.pageNum,
                        totalPages: data.data.totalPages,
                        totalSize: data.data.totalSize,
                        pageSize: data.data.pageSize,
                        buttonClickCallback: this.search.bind(this, args)
                    });
                }.bind(this));
            } else {
                throw new Error("参数无效，DOM中无法找到id为[" + args.form + "]的Form！");
            }
        } else {
            throw new Error("参数无效，请传递如{url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}的JS对象");
        }
    },
    onAdded: function() {
        var tempThis = this;
        this.initTree({
            treeId: 'systemuseradmin_treeContent',
            url: '/system/core/useradmin/orgUserTree',
            check: {
                enable : false
            },
            treeClick: tempThis.treeClick
        });

    },
    treeClick: function(event, treeId, treeNode) {
        if (treeNode.type == "user") {
            if ($("#user_" + treeNode.id).length < 1) {
                var arr = [
                    '<li>',
                    '<a href="javascript:;"><i class="fa fa-user"></i>', treeNode.name, '(', treeNode.code, ')', '',
                    '<input type="hidden" id="user_', treeNode.id, '" name="userIds" value="', treeNode.id, '" />',
                    '<div class="tools">X</div>',
                    '</a>',
                    '</li>'
                ];
                $("#systemuseradmin_selectedUserUl").append(arr.join(''));
                $("#systemuseradmin_selectedUserCount").text($("#systemuseradmin_selectedUserUl li").length);
                $("#systemuseradmin_selectedUserUl li .tools").unbind("click");
                $("#systemuseradmin_selectedUserUl li .tools").bind("click", function() {
                    $(this).parent().parent().remove();
                    $("#systemuseradmin_selectedUserCount").text($("#systemuseradmin_selectedUserUl li").length);
                });
            }
        }
    },
    initTree: function (param) {
        let args = {
            url: param.url,
            type: 'get'
        };
        let setting = {
            check : param.check,
            data: {
                simpleData: {
                    enable: true
                }
            },
            callback: {
                onClick: param.treeClick
            },
            view: {
                fontCss: function (treeId, treeNode) {
                    return (!!treeNode.highlight) ? {color: "blue", "font-weight": "bold"} : {
                        color: "#000",
                        "font-weight": "normal"
                    };
                }
            }
        };
        this.ajaxResource(args).then(function(data) {
            if (data.data && data.data.length > 0) {
                let zTree = $.fn.zTree.init($("#" + param.treeId), setting, data.data);
                var root = zTree.getNodesByFilter(function (node) { return node.level == 0 }, true);
                zTree.expandNode(root, true, false, false);  //默认展开第一级
                if (param.checked) {
                    var chkNodes = zTree.getCheckedNodes(true);
                    $.each(chkNodes, function (key, item) {
                       zTree.expandNode(item.getParentNode(), true, false, false);
                    });
                }
            }
        });
    },
    searchZtree: function (element) {
        var treeId = "treeContent";
        var searchConditionId = "txtSearch";
        var searchCondition = $('#' + searchConditionId).val();
        var searchObj = {};
        searchObj.treeId = treeId;
        searchObj.condition = searchCondition;
        searchObj.type="user";
        var nodeObj = this.treeSearchAndExpand(searchObj);
    },
    treeSearchAndExpand: function (searchObj) {
        var treeObj = $.fn.zTree.getZTreeObj(searchObj.treeId);
        // <1>. 先把全部节点更新为普通样式
        var treeNodes = treeObj.transformToArray(treeObj.getNodes());
        for (var i = 0; i < treeNodes.length; i++) {
            treeNodes[i].highlight = false;
            treeObj.updateNode(treeNodes[i]);
        }
        // <2>.得到模糊匹配搜索条件的节点数组集合
        var highlightNodes = new Array();

        if (searchObj.condition != "") {
            highlightNodes = treeObj.getNodesByParamFuzzy("name", searchObj.condition, null);
        } else {
            return;
        }
        // <3>.高亮显示并展示【指定节点s】
        var nodeObj = {};
        if (highlightNodes != null && highlightNodes.length > 0) {
            treeObj.cancelSelectedNode();
            var first = true;
            for (var i = 0; i < highlightNodes.length; i++) {
                if (searchObj.type && searchObj.type.indexOf(highlightNodes[i].type) < 0) {
                    continue;
                }
                if (first) {
                    nodeObj = highlightNodes[i];
                    treeObj.selectNode(highlightNodes[i], true);
                    first = false;
                }
                highlightNodes[i].highlight = true;
                treeObj.updateNode(highlightNodes[i]);// 级联选中
                treeObj.expandNode(highlightNodes[i].getParentNode(), true);
            }
        }
        return nodeObj;
    },
    submitForm(args) {
        if ($("#systemuseradmin_selectedUserUl li :hidden[name='userIds']").length > 0) {
            this.submit(args);
        } else {
            layer.alert("请先选择人员！", {
                icon: 2
            });
        }
    },
    adminSet(args) {
        args.type = args.type || 'get';
        return this.render(args);
    },
    onAdminSeted() {
        var tempThis = this;
        var id = $("#systemuseradmin_adminId").val();
        this.initTree({
            treeId: 'systemuseradmin_organizationTree',
            url: '/system/core/useradmin/adminOrgTree/' + id,
            check: {
                enable: true,
                chkboxType: { "Y" : "ps", "N" : "ps" }
            },
            checked: true
        });
        this.initTree({
            treeId: 'systemuseradmin_resourceTree',
            url: '/system/core/useradmin/adminResourceTree/' + id,
            check: {
                enable: true,
                chkboxType: { "Y" : "ps", "N" : "ps" }
            },
            checked: true
        });
    },
    setScope(args) {
        var organizationTree = $.fn.zTree.getZTreeObj("systemuseradmin_organizationTree");
        var resourceTree = $.fn.zTree.getZTreeObj("systemuseradmin_resourceTree");
        var orgnodes = organizationTree.getCheckedNodes(true);
        var resnodes = resourceTree.getCheckedNodes(true);
        if (orgnodes.length == 0 && resnodes.length == 0) {
            layer.alert("请至少选择一条数据！", {
                icon: 2
            });
            return;
        }
        var orgIds = [], resIds = [];
        $.each(orgnodes, function(key, item) {
            orgIds.push(item.id)
        });
        $.each(resnodes, function(key, item) {
            resIds.push(item.id)
        });

        args.data = {"orgIds": orgIds.join(","), "resIds": resIds.join(","), "adminId": $("#systemuseradmin_adminId").val()};
        var tempThis = this;
        this.ajaxResource(args).then(function () {
            tempThis.goBack();
        });
    },
    auditAdminSet(args) {
        args.type = args.type || 'get';
        return this.render(args);
    },
    onAuditAdminSeted() {
        var tempThis = this;
        var id = $("#systemuseradmin_adminId").val();
        this.initTree({
            treeId: 'systemuseradmin_organizationTree',
            url: '/system/core/useradmin/adminOrgTree/' + id,
            check: {
                enable: true,
                chkboxType: { "Y" : "ps", "N" : "ps" }
            },
            checked: true
        });
    },
    setAuditScope(args) {
        var organizationTree = $.fn.zTree.getZTreeObj("systemuseradmin_organizationTree");
        var orgnodes = organizationTree.getCheckedNodes(true);
        if (orgnodes.length == 0) {
            layer.alert("请至少选择一条数据！", {
                icon: 2
            });
            return;
        }
        var orgIds = [];
        $.each(orgnodes, function(key, item) {
            orgIds.push(item.id)
        });
        args.data = {"orgIds": orgIds.join(","), "adminId": $("#systemuseradmin_adminId").val()};
        var tempThis = this;
        this.ajaxResource(args).then(function () {
            tempThis.goBack();
        });
    },
    onDetailsed() {
        var tempThis = this;
        var id = $("#systemuseradmin_adminId").val();
        if ($("#systemuseradmin_organizationTree").length > 0) {
            this.initTree({
                treeId: 'systemuseradmin_organizationTree',
                url: '/system/core/useradmin/adminOrgTree/' + id,
                check: {
                    enable: true,
                    chkboxType: { "Y" : "ps", "N" : "ps" }
                },
                checked: true
            });
        }
        if ($("#systemuseradmin_resourceTree").length > 0) {
            this.initTree({
                treeId: 'systemuseradmin_resourceTree',
                url: '/system/core/useradmin/adminResourceTree/' + id,
                check: {
                    enable: true,
                    chkboxType: { "Y" : "ps", "N" : "ps" }
                },
                checked: true
            });
        }
    }
});























