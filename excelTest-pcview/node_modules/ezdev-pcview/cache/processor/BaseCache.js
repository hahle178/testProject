/**
 * Created by zhaofs on 2017/6/18.
 * --------------------
 * - 字典缓存实现 -
 * --------------------
 * 实现字典项缓存
 */

import Processor from "../../base/Processor";
import ajaxRequest from "../../ajax/AjaxRequest";

export default class extends Processor {

    constructor(url, name) {
        super(name);
        this._url = url;
        this._name = name;
    }

    /**
     * 初始化缓存
     */
    initCache() {
        this.fetchData().then(function (data) {
            this.cacheData(data);
        }.bind(this))
    }

    /**
     * 获取数据
     * @returns {*}
     */
    fetchData() {
        return new Promise((resolve) => {
            let cacheData = store.get(this.name);
            if (cacheData) {
                resolve(cacheData);
            } else {
                if (this.url) {
                    ajaxRequest.ajax({url: this.url, type: "get"}).then(function (data) {
                        resolve(data.data);
                        store.set(this.name, data.data)
                    }.bind(this))
                }else{
                    console.warn(`没有设置[${this.name}] 缓存处理器的请求URL，此缓存无效！`)
                }

            }
        });
    }

    /**
     * 缓存数据处理
     * @param data
     */
    cacheData(data) {
        throw new Error("请在BaseCache子类中实现cacheData方法以便进行缓存处理！");
    }

    get url() {
        return this._url;
    }

    set url(value) {
        this._url = value;
    }

    get name() {
        return this._name;
    }

    set name(value) {
        this._name = value;
    }

};
