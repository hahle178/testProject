/**
 * Created by zhaofs on 2016/9/12.
 * --------------------
 * - 导航菜单 -
 * --------------------
 * 基本导航菜单
 */
import BaseMessage from "../BaseMessage";
import renderer from "../../../../render/Renderer";

export default class extends BaseMessage {
    constructor(options) {
        super(Object.assign({
            name: "nav/notification",
            order: 50
        }, options));
    }

    resolveTpl(tpl) {
        return require("./tpl/" + tpl + ".html");
    }

    /**
     * 生成html
     */
    generateHtml() {
        //当确定登录用户账户后，初始化该用户的“通知”区域，包括“通知”数、未读通知等
        window.ezdev.addEvent("initializedUser", function(user) {
            //初始化“通知”区域
            this.generateNotice(user.account);
        }.bind(this));
        this.addEvent("refreshNotice", function(userAccount) {
            //初始化“通知”区域
            this.generateNotice(userAccount);
        }.bind(this));
        return this.resolveTpl("index")({});
    }

    //初始化“通知”区域
    //本方法用于第一次渲染页面时，手动抓取用户的“通知”
    generateNotice(userid){
        //获取当前用户的未读消息条数
        var argsGetCount = {
            url:"/message/getUnconsumedMessageCount"
            , type:"post"
            , data:"userid="+userid+"&topic=notice"
        };
        this.ajaxResource(argsGetCount).then(
            function (dataCount) {
                //获取当前用户最后5条未读消息
                var argsGetLastMessage = {
                    url:"/message/getLastUnconsumedMessage"
                    , type:"post"
                    , data:"userid="+userid+"&count=100&topic=notice"
                };
                this.ajaxResource(argsGetLastMessage).then(
                    function (dataMessage) {

                        var data = {
                            msgCount:dataCount.data,
                            msgs:dataMessage.data
                        };
                        //填充到模板html内
                        $(".dropdown.notification-nav").replaceWith(this.resolveTpl("index")(data));
                        renderer.analyzeHtml($(".dropdown.notification-nav"));
                    }.bind(this)
                );
            }.bind(this)
        );
    }

    /**
     * 渲染完成后对html逻辑处理,根据需求决定是否需要重载
     * @param container 导航栏容器
     */
    disposeHtml(container) {

        //本方法用于新通知到达时，自动根据新通知内容更新用户的“通知”区域
        //收到“通知”消息后，对“通知”区域进行重绘
        window.ezdev.addEvent('noticeMsgArrived',function (msg) {

            var notice = undefined;
            var noticeCount = 0;
            var noticeUnconsumed = {};

            //对消息的过滤
            for(var i=0; i<msg.pms.length; i++){
                var aMsg = msg.pms[i];
                if(aMsg.title.indexOf("notice") == 0){
                    notice = aMsg.content;
                }
                if(aMsg.title.indexOf("noticeCount") == 0){
                    noticeCount = aMsg.content;
                }
                if(aMsg.title.indexOf("noticeUnconsumed") == 0){
                    noticeUnconsumed = aMsg.content;
                }
            }

            var data = {
                msgCount:noticeCount,
                msgs:noticeUnconsumed
            };

            //填充到模板html内
            $(".dropdown.notification-nav").replaceWith(this.resolveTpl("index")(data));
            renderer.analyzeHtml($(".dropdown.notification-nav"));
        }.bind(this));
    }

    doClick(args){
        this.fireEvent("noticeClicked",args.color);
        this.fireEvent("noticeClickedId",args.dataId);
    }

    doAllClick(){
        this.fireEvent("noticeAllClicked");
    }

};