/**
 * Created by zhaofs on 2016/7/19.
 * --------------------
 * - 单页面应用 -
 * --------------------
 * 生成单页面应用
 */

import Event from "./base/Events";

import Dispatcher from "./handler/HandlerDispatcher";
import AjaxIntercept from "./ajax/AjaxIntercept";
import ajaxRequest from "./ajax/AjaxRequest";

import componentManager from "./components/ComponentManager";
import moduleManager from "./base/ModulesManager";
import handlerManager from "./handler/HandlerManager";
import AnalyzerManager from "./render/analyzer/AnalyzerManager";
import CacheManager from "./cache/CacheManager";
import NavbarManager from "./layout/navbar/NavbarManager";

import ExternalHandler from "./system/external/ExternalHandler";
import ToolsHandler from "./system/tools/ToolsHandler";


import appConfig from "./Config";

import htmlUtils from "./utils/HtmlUtils";

import "./extend/es6/NativeObject.js";
import "./extend/arttemplate/ArttemplateFilter";

export default class extends Event {

    constructor(options) {
        super(options);
        this._config = Object.assign(appConfig, options);

        //实例化必须依赖
        this.dispatcher = this.config.dispatcher || new Dispatcher();
        this.ajaxIntercept = this.config.ajaxIntercept || new AjaxIntercept();

        this.cacheManager = this.config.cacheManager || new CacheManager();
        this.analyzerManager = this.config.analyzerManager || new AnalyzerManager();
        this.navbarManager = this.config.navbarManager || new NavbarManager(this.config.navbarId || "navbar-nav");

        //加载事件处理
        $(document).ready(() => {
            /* 屏蔽回车 不屏蔽textarea 换行 */
            $(document).keydown(function (event) {
                if (event.keyCode === 13) {
                    if (!$(event.target).is("textarea")) {
                        return false;
                    }
                }
            });

            //窗口事件处理
            $(window).resize(() => {
                htmlUtils.autoSizeIframe();
                this.fireEvent('resized', this);
            });
        });
        window.ezdev = this;
    }

    /**
     * 初始化应用
     */
    initApplication() {
        this.initModules();
        this.initComponents();
        this.initAnalyzers();

        //初始化调度器、Ajax请求拦截及布局控制
        this.dispatcher.initDispatcher();
        this.ajaxIntercept.initIntercept();

        //初始化其他项
        new Promise((resolve) => {
            if (this.config.userInfoUrl) {
                ajaxRequest.ajax({
                    url: this.config.userInfoUrl,
                    type: "get"
                }).then((data) => {
                    this.config.user = data.data.user;
                    resolve(data);
                })
            } else {
                $(document).ready(() => {
                    resolve(null);
                });
            }

        }).then((data) => {
                this.initCache();
                this.initNavbar();

                //初始化各模块
                for (let module of moduleManager.getAll().values()) {
                    module.initModule(this);
                }

                //初始化侧边菜单栏
                if (this.config.sidebarMenu) {
                    this.config.sidebarMenu.initSidebarMenu().then(() => {
                        this.config.sidebarMenu.initDefaultUrl();
                        this.config.sidebarMenu.activateMenu();
                    });
                }

                //如果初始有锚点就触发handler调用
                if (window.location.href.indexOf('#') > 0) {
                    this.dispatcher.dispatch(false)
                }

                //触发事件
                this.fireEvent('initializedApp', this);
                if (data) {
                    this.fireEvent('initializedUser', data.data.user);
                }

            }
        );

    }

    /**
     * 初始化模块相关内容
     */
    initModules() {
        for (let module of moduleManager.getAll().values()) {
            //静态导入handler
            if (module.staticImportHandler()) {
                handlerManager.staticImport(module.staticImportHandler())
            }

            //初始化配置信息
            module.initConfig(this.config);
            //添加缓存
            module.addCache(this.cacheManager);
            //添加导航栏
            module.addNavbar(this.navbarManager);
        }

        //添加相关Handler
        handlerManager.staticImportByName("system/external", new ExternalHandler());
        handlerManager.staticImportByName("system/tools", new ToolsHandler());
    }

    /**
     * 初始化所有的WEB组件
     */
    initComponents() {
        componentManager.initComponents();
        if (this.config.components && this.config.components.length > 0) {
            this.config.components.forEach(function (com) {
                componentManager.add(com);
            });
        }
    }

    /**
     * 初始化分析器
     */
    initAnalyzers() {
        this.analyzerManager.add(this.config.analyzers);
        this.analyzerManager.initAnalyzers();
    }

    /**
     * 初始化缓存
     */
    initCache() {
        if (this.config.caches && this.config.caches.length > 0) {
            this.config.caches.forEach((nav) => {
                this.cacheManager.add(nav);
            });
        }
        this.cacheManager.initCache();
    }

    /**
     * 初始化顶端菜单栏
     */
    initNavbar() {
        if (this.config.navbars && this.config.navbars.length > 0) {
            this.config.navbars.forEach((nav) => {
                this.navbarManager.add(nav);
            });
        }
        //初始化顶端菜单栏
        this.navbarManager.initNavbar();
    }

    get config() {
        return this._config;
    }

    set config(value) {
        this._config = value;
    }

};
