/**
 * Created by zhaofs on 2018/05/19.
 * ----------------------------------------
 * - 切片管理，主要对注册的切片进行管理 -
 * ----------------------------------------
 *  切片管理，主要对注册的切片进行管理
 */
const map = new Map([["doRouteBefore", []], ["doRouteAfter", []], ["invokeBefore", new Map()], ["invokeAfter", new Map()]]);
export default class {
    /**
     * 设置相应值
     * @param key
     * @param value
     */
    static set (key, value) {
        map.set(key, value);
    }

    /**
     * 得到处理器
     * @param name
     * @returns {V} 处理器
     */
    static get (name) {
        return map.get(name)
    }

    /**
     * 获取所有处理器
     */
    static getAll() {
        return map.values();
    }

    /**
     * 是否存在
     * @param name
     * @returns {boolean}
     */
    static isExist(name) {
        return map.has(name);
    }


    /**
     *  触发路由前切面处理
     * @param handlerMapping
     */
    static doRouteBefore(handlerMapping,href) {
        map.get("doRouteBefore").forEach((fn) => {
            fn(handlerMapping,href);
        });
    }


    /**
     *  触发路由执行后切面处理
     * @param handlerMapping
     */
    static doRouteAfter(handlerMapping,href) {
        map.get("doRouteAfter").forEach((fn) => {
            fn(handlerMapping,href);
        });
    }


    /**
     * 触发方法执行前切面处理
     * @param path
     * @param args
     */
    static doInvokeBefore(path, args) {
        let fn = map.get("invokeBefore").get(path);
        if (fn) fn(args)
    }

    /**
     * 触发方法执行后切面处理
     * @param path
     * @param args
     */
    static doInvokeAfter(path, args) {
        let fn = map.get("invokeAfter").get(path);
        if (fn) fn(args)
    }

}