/**
 * Created by zhaofs on 2016/7/19.
 * --------------------
 * - 处理器 -
 * --------------------
 * 界面中的操作实现，比如，增删改查等等操作，并把增删改查进一步抽象为查询(search)和提交(showDialog、submit);
 */

import Processor from "../base/Processor";

import config from "../Config";
import htmlUtils from "../utils/HtmlUtils";
import eventUtils from "../utils/EvenUtils";
import Table from "../components/table/Table";
import renderer from "../render/Renderer";
import ajaxRequest from "../ajax/AjaxRequest";

export default class extends Processor {
    constructor(options) {
        super(options ? options.name : null, options);
    }

    /**
     * 初始化处理器
     */
    index(args) {

        if (args.target === 'iframe') {
            this.iframeWrap(args);
            return false;
        }
        if (args.target === 'window') {
            window.open(args.src);
            return false;
        }

        this.render(
            Object.assign({
                tpl: args.tpl || config.indexTpl,
                data: {},
                contentId: this.contentId
            }, args)
        );
    }

    /**
     * 实现查询功能
     * @param args
     * {url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}
     */
    search(args) {
        //处理多DIV容器支持
        args.form = args.form || this.getContainerId('searchForm');

        if (args.url) {

            //处理多DIV容器支持
            args.contentId = args.contentId || this.getContainerId(config.listId);

            let form = $(`#${args.form}`);
            if (form.length > 0) {
                args.data = form.serialize();
                args.tpl = args.tpl || config.listTpl;

                return this.render(args).then(function (data) {
                    new Table({
                        pageID: this.getContainerId('pager'),
                        sortID:this.getContainerId('sort'),
                        pageNum: data.data.pageNum,
                        totalPages: data.data.totalPages,
                        totalSize: data.data.totalSize,
                        pageSize: data.data.pageSize,
                        buttonClickCallback: this.search.bind(this, args)
                    });
                }.bind(this))
                //add lhw 20180531 对外暴露接口：listAfter，用于list部分渲染完毕后的用户自定义操作 start
                .then(function(){
                    this["listAfter"] && this["listAfter"].call(this, args);
                }.bind(this));
                //add end
            } else {
                throw new Error("参数无效，DOM中无法找到id为[" + args.form + "]的Form！");
            }

        } else {
            throw new Error("参数无效，请传递如{url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}的JS对象");
        }

    }

    /**
     * 添加信息
     * @param args
     * {tpl:add-(默认),contentId:list-(默认)}
     */
    add(args) {
        args.tpl = args.tpl || config.addTpl;
        if (args.tpl) {
            args.type = args.type || 'get';
            return this.render(args);
        } else {
            throw new Error("参数无效，请传递如{tpl:add-(默认),contentId:list-(默认)}的JS对象");
        }
    }

    /**
     * 编辑信息
     * @param args
     * {url:/demo/mybatisuser/pages-(必选),tpl:edit-(默认),type:get-(默认),contentId:list-(默认)}
     */
    edit(args) {
        args.tpl = args.tpl || config.editTpl;
        if (args.url && args.tpl) {
            return this.details(args);
        } else {
            throw new Error("参数无效，请传递如{url:/demo/mybatisuser/pages-(必选),tpl:edit-(默认),type:get-(默认),contentId:list-(默认)}");
        }
    }

    /**
     * 查看详情
     * @param args
     * {url:/demo/mybatisuser/pages-(必选),tpl:detail-(默认),type:get-(默认),contentId:pageList-(默认)}
     */
    details(args) {
        args.tpl = args.tpl || config.detailTpl;
        if (args.url && args.tpl) {
            args.type = args.type || 'get';
            return this.render(args);
        } else {
            throw new Error("参数无效，请传递如{url:/demo/mybatisuser/pages-(必选),tpl:demo/user/list-(必选),type:get-(默认),contentId:pageList-(默认)}的JS对象");
        }
    }

    /**
     * 界面渲染
     * @param args
     * {tpl:list-(必选),type:post-(默认),url:/demo/mybatisuser/pages-(可选),contentId:content-wrapper-(默认)}
     */
    render(args) {
        if (args.tpl) {
            return renderer.render(Object.assign({
                path: this.path,
                contentId: this.contentId,
                mcid: this.mcid//设置主容器ID
            }, args), typeof args.tpl === "string" ? this.resolveTpl(args.tpl) : args.tpl);
        } else {
            throw new Error("参数无效，请传递如{tpl:list-(必选),type:post-(默认),url:/demo/mybatisuser/pages-(可选),contentId:content-wrapper-(默认)}的JS对象");
        }

    }

    /**
     * ajax获取资源
     * @param args
     * {url:/demo/mybatisuser/pages-(必选),type:post-(默认)}
     */
    ajaxResource(args) {
        if (args && args.url) {
            args.url = this.ajaxBasePath ? this.ajaxBasePath + args.url : args.url;
            return ajaxRequest.ajax(args);
        } else {
            throw new Error("参数无效，请传递如{url:/demo/mybatisuser/pages-(必选),type:post-(默认)}的JS对象");
        }
    }

    /**
     * 弹出信息框
     * @param args
     * {dialog:confirm,type:post-(默认),isReload:true-(默认),url:/demo/mybatisuser/pages-(可选)}
     */
    dialog(args) {
        let promise = null;
        switch (args.dialog) {
            case 'confirm':
                let layerid = layer.confirm('你确定要执行此操作吗？', {
                    btn: ['确定', '取消'] //按钮
                }, function () {
                    layer.close(layerid);
                    promise = this.ajaxResource(args).then(() => {
                        //刷新查询页面
                        if (args.isReload !== 'false') {
                            this.reload();
                        }
                    });
                }.bind(this), function () {
                    layer.close(layerid);
                });
                break;
            default:  //设置shade,zIndex解决附件上传对话框弹出遮罩层的问题，修改人lvhuwei
                let layerId = layer.open({
                    shade: 0,
                    zIndex: 1,
                    type: 1,
                    move: args.move,
                    title: args.title || '信息',
                    area: [args.width || '800px', args.height || '600px'] //宽高
                });
                args.contentId = $('#layui-layer' + layerId).find('.layui-layer-content');
                promise = this.render(args);
                break;
        }
        return promise;
    }

    /**
     * 提交数据
     * @param args
     * {url:/demo/mybatisuser-(必选),form:submitForm-(默认),type:post-(默认),contentType:'application/json'-(默认),submitType:'oneToMany'-(页面一对多情况，普通表单不需要该参数)}
     * Modify by wangchen 添加页面一对多情况的参数处理，2017-02-05
     */
    submit(args) {
        args.form = args.form || this.getContainerId('submitForm');
        if (args && args.url) {

            let form = $('#' + args.form);
            if (form.length > 0) {

                return new Promise((resolve, reject) => {

                    if (!form.Validform().check()) {
                        reject({msg: "验证无效"});
                    } else {
                        eventUtils.getCurrentEventTarget().attr("disabled", "disabled");

                        args.contentType = args.contentType || 'application/json';
                        if (args.contentType.indexOf("json") >= 0) {
                            if (typeof(args.submitType) !== 'undefined' && args.submitType === 'oneToMany') {
                                args.data = JSON.stringify(htmlUtils.formToPageJson(form));
                            } else {
                                args.data = JSON.stringify(htmlUtils.formToJson(form)); //forms.serialize();
                            }
                        } else {
                            args.data = form.serialize()
                        }
                        this.ajaxResource(args).then((data) => {
                            if (!args.jump) {
                                this.goBack(args);
                            } else {
                                eventUtils.getCurrentEventTarget().removeAttr("disabled");
                            }
                            resolve(data);
                        }, (data) => {
                            eventUtils.getCurrentEventTarget().removeAttr("disabled");
                            reject(data);
                        });

                    }

                });

            } else {
                throw new Error("参数无效，DOM中无法找到id为[" + args.form + "]的Form！");
            }


        } else {
            throw new Error("参数无效，请传递如{url:/demo/mybatisuser-(必选),type:post-(默认),contentType:'application/json'-(默认)}的JS对象");
        }
    }

    /**
     * 返回
     */
    goBack(args) {
        if (args && args.goUrl) {
            window.location.href = "#" + args.goUrl;
        } else {
            history.go(-1);
        }
    }

    /**
     * 关闭对话框
     */
    close() {
        layer.closeAll()
    }

    /**
     * 获取模板方法
     * @param tpl
     * @returns {*}
     */
    resolveTpl(tpl) {
        throw new Error("请在BaseHandler子类中实现resolveTpl方法以便获取模板文件！如：resolveTpl(tpl) {return require('./tpl/' + tpl + '.html');}");
    }


    /**
     * 导出Excel
     * @param args
     * {url:/demo/mybatisuser-(必选),formId:''}
     * @param dom
     * 触发事件元素
     */
    exportExcel(args, dom) {
        this.download(args, dom);
    }


    /**
     * 下载处理
     * @param args
     * {url:/demo/mybatisuser-(必选),formId:''}
     * 触发事件元素
     */
    download(args) {
        if (!window.exported) {
            window.exported = function () {
                if (this.wd) {
                    alert("导出失败！");
                }
            }.bind(this)
        }

        let removeChildren = function (pnode) {
            let childs = pnode.childNodes;
            for (let i = childs.length - 1; i >= 0; i--) {
                pnode.removeChild(childs.item(i));
            }
        };

        if ($('#download').length <= 0) {
            $('body').append('<iframe id="download" style="display: none" onload="exported()"></iframe>');
        }


        let wd = this.wd = document.getElementById('download').contentWindow || document.frames['download'].window;
        let form = wd.document.getElementById('exportExcel') || wd.document.createElement('form');

        form.setAttribute("id", "exportExcel");
        form.setAttribute("action", args.url);
        form.setAttribute('method', 'post');
        form.setAttribute('enctype', 'multipart/form-data');

        removeChildren(form);

        let data = htmlUtils.formToJson(args.form || 'searchForm');
        if (data) {
            for (let keyName in data) {
                let input = wd.document.createElement('input');
                input.setAttribute("name", keyName);
                input.setAttribute('value', data[keyName]);
                form.appendChild(input);
            }
        }
        wd.document.body.appendChild(form);
        form.submit();
    }

    /**
     * 刷新当前页面
     */
    reload() {
        window.ezdev.dispatcher.dispatch();
    }


    /**
     * 获取容器ID
     * @param defaultId 默认ID
     */
    getContainerId(defaultId) {
        return (() => {
            let le = $(`#${this.contentId}_${defaultId}`);
            return le.length > 0 ? `${this.contentId}_${defaultId}` : false
        })() || defaultId;
    }
};