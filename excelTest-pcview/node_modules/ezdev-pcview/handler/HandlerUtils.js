/**
 * Created by zhaofs on 2017/5/6.
 * --------------------
 * - Handle方法调用 -
 * --------------------
 * 实现对Handler方法动态调用
 */
import handlerManage from "./HandlerManager";
import aspectManager from "../aspect/AspectManager";

const appendArgs = {};

export default {

    /**
     * 动态调用Handler方法
     * @param href uri字符串
     */
    invokeHandlerByHref: function (href) {
        let handlerMapping = this.resolveHandler(href);
        this.invokeHandler(handlerMapping.path, handlerMapping.method, handlerMapping.args);
    },

    /**
     * 动态调用Handler方法
     * @param href path包含路径和方法名称
     * @param args 调用参数
     */
    invokeHandlerByPath: function (path, args) {
        let handlerMapping = this.resolveHandler(path);
        this.invokeHandler(handlerMapping.path, handlerMapping.method, args);
    },

    /**
     * Handler方法调用
     * @param handlerPath Handler路径
     * @param method Handler方法
     * @param args 对应参数
     */
    invokeHandler: function (handlerPath, method, args) {
        handlerManage.resolveHandler(handlerPath).then(function (handler) {
            if (handler) {
                if (handler[method]) {
                    try {
                        handler.path = handler.id || handlerPath;
                        handler.contentId = handler.path.replaceAll("/", "");
                        handler.mcid = handler.contentId;//设置主容器ID

                        //对象内部AOP处理，即对象内部通过方法后缀对方法进行拦截处理，主要用于对父对象中的方法拦截
                        handler[method + "Before"] && handler[method + "Before"].call(handler, args);
                        aspectManager.doInvokeBefore(`${handlerPath}/${method}`, args);

                        console.trace('Handler[' + handlerPath + '] 中的 [' + method + "] 方法被调用，参数为：" + JSON.stringify(args));
                        let promise = handler[method].call(handler, args);
                        if (promise && promise.then) {
                            promise.then(function (data) {
                                let result = {args: args, data: data};
                                handler.fireEvent(method + 'ed', result);
                                handler[method + "After"] && handler[method + "After"].call(handler, result);
                                aspectManager.doInvokeAfter(`${handlerPath}/${method}`, result);
                            });
                        } else {
                            let result = {args: args, data: {}};
                            handler.fireEvent(method + 'ed', result);
                            handler[method + "After"] && handler[method + "After"].call(handler, result);
                            aspectManager.doInvokeAfter(`${handlerPath}/${method}`, result);
                        }
                    } catch (e) {
                        console.error('调用Handler[' + handlerPath + ']中的[' + method + ']方法错误！', e);
                    }
                } else {
                    console.error('Handler [' + handlerPath + ']中无 ' + method + ' 方法！')
                }


            } else {
                console.error('无法找到Path为[' + handlerPath + ']的Handler！！')
            }
        });

    },

    /**
     * 分析Handler相关数据信息
     * @param handlerStr
     * @returns {{path: (string|*), method: (string|*), args: {}}}
     */
    resolveHandler: function (handlerStr) {
        let hash = handlerStr.split('?');
        let index = hash[0].lastIndexOf('/'),
            path = hash[0].substring(1, index),
            method = hash[0].substring(index + 1),
            args = {};

        //分析参数
        if (hash.length > 1) {
            let urlArray = hash[1].split("&");
            for (let i = 0, len = urlArray.length; i < len; i++) {
                let urlItem = urlArray[i];
                let item = urlItem.split("=");
                //modify by lhw 20180518 start
                //args[item[0]] = decodeURIComponent(item[1]);
                if (item[0] === "data") {
                    args[item[0]] = JSON.parse(decodeURIComponent(item[1]));
                } else {
                    args[item[0]] = decodeURIComponent(item[1]);
                }
                //modify end

            }
        }
        Object.assign(args, appendArgs[path]);

        return {
            path: path,
            method: method,
            args: args
        };
    },

    /**
     * 路由Handler并传递参数
     * @param href
     * @param args
     */
    routeHandler: function (href, args) {
        let path = href.split('?')[0];

        if (path.indexOf("/") === 0) {
            path = path.substring(1, path.lastIndexOf("/"));
            href = href.substring(1);
        } else {
            path = path.substring(0, path.lastIndexOf("/"));
        }
        appendArgs[path] = args;

        window.location.href = `/#/${href}`;
    }
};