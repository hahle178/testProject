/**
 * Created by zhaofs on 2016/7/21.
 * --------------------
 * - 渲染器 -
 * --------------------
 * 实现对html片段的渲染
 */
import config from "../Config";
import ajaxRequest from "../ajax/AjaxRequest";

let getContainer = function (content) {
    if(typeof(content) === 'string'){
        content=$(`#${content}`);
        return content.length>0?content:$(`#${config.contentId}`)
    }
    return content;
};

export default {

    /**
     * 渲染位置
     */
    position: {
        inner: "inner",
        after: 'after',
        before: 'before',
        replace: 'replace',
        append: 'append'
    },

    /**
     * 根据JSON生成HTML并进行渲染,支持ajax请求
     * options:{type:post-(默认),url:/demo/mybatisuser/pages,contentId:pageList}
     */
    render: function (options, tpl) {
        if (options && typeof(tpl) === "function") {
            return new Promise((resolve) => {
                //如果有url参数就用ajax请求的数据渲染html
                if (options.url) {
                    ajaxRequest.ajax(options).then(function (data) {
                        try {
                            data.path = options.path;
                            data.mcid=options.mcid;

                            this.innerHtml(options.contentId, tpl(data), options.position);
                            resolve(data);
                        } catch (e) {
                            console.error('调用Renderer中的render方法错误！', e);
                        }
                    }.bind(this));
                } else {
                    let data = options.data || {};
                    data.path = options.path;
                    data.mcid=options.mcid;
                    this.innerHtml(options.contentId, tpl(data), options.position);
                    resolve(data);
                }
            });
        } else {
            throw new Error("调用Renderer中的render方法参数无效，请传递参数options:{type:post-(默认),url:/demo/mybatisuser/pages,contentId:pageList}的JS对象},tpl:functions");
        }
    },

    /**
     * 填充html
     * @param el 渲染依赖元素
     * @param html 要渲染的内容
     * @param position 渲染位置
     */
    innerHtml: function (el, html, position = "inner") {
        if (el && html) {
            el = getContainer(el);
            /* 渲染HTML页面 */
            switch (position) {
                case this.position.inner:
                    el.html(html);
                    break;
                case this.position.after:
                    el.after(html);
                    break;
                case this.position.before:
                    el.before(html);
                    break;
                case this.position.replace:
                    el.replaceWith(html);
                    break;
                case this.position.append:
                    el.append(html);
                    break;
            }
            this.analyzeHtml(el);
        } else {
            throw new Error("参数无效，请传 content，html 参数");
        }
    },

    /**
     * 对加载的元素进行分析
     * @param content
     */
    analyzeHtml: function (content) {
        if (window.ezdev.analyzerManager) {
            window.ezdev.analyzerManager.analyze(getContainer(content));
        }
    }

};