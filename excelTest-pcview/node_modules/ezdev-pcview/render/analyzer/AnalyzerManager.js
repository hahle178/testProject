/**
 * Created by zhaofs on 2017/5/6.
 * --------------------
 * - 分析器管理 -
 * --------------------
 * 实现对分析器的统一管理
 */

import ProcessorManager from "../../base/ProcessorManager";
import EventAnalyzer from "./EventAnalyzer";
import RouterAnalyzer from "./RouterAnalyzer";
import ComponentAnalyzer from "./ComponentAnalyzer";
import ValidFormAnalyzer from "./ValidFormAnalyzer";
import PermissionAnalyzer from "./PermissionAnalyzer";


export default class extends ProcessorManager{
    constructor() {
        super();
        this._analyzers=[];
    }
    /**
     * 初始化分析器
     */
    initAnalyzers() {
        // //判断是否由添加了必须依赖，如没有测添加
        if (!this.isExist("PermissionAnalyzer")) {
            this.add(new PermissionAnalyzer());
        }
        if (!this.isExist("EventAnalyzer")) {
            this.add(new EventAnalyzer());
        }
        if (!this.isExist("RouterAnalyzer")) {
            this.add(new RouterAnalyzer());
        }
        if (!this.isExist("ComponentAnalyzer")) {
            this.add(new ComponentAnalyzer());
        }
        if (!this.isExist("ValidFormAnalyzer")) {
            this.add(new ValidFormAnalyzer());
        }

        //对执行排序，值越小优先级越大
        this.analyzers = Array.from(this.getAll().values()).sort(function (a, b) {
            if (a.order > b.order) {
                return 1;
            }
            if (a.order < b.order) {
                return -1;
            }
            return 0;
        });

        //初始化各分析器
        this.analyzers.forEach((analyzer) => {
            analyzer.initAnalyzer()
        });

    }

    /**
     * 对元素进行分析处理
     * @param content
     */
    analyze(content) {
        this.analyzers.forEach((analyzer) => {
            analyzer.analyze.call(analyzer, content)
        });
    }

    get analyzers() {
        return this._analyzers;
    }

    set analyzers(value) {
        this._analyzers = value;
    }

}
