/**
 * Created by wangchen on 2017/7/31.
 * --------------------
 * - html组件管理 -
 * --------------------
 * 实现对系统调用组件的统一管理
 * renderHtml方法为常用方法，只需要传入符合的“e-”开头的dom元素即可，目前在组件扫描分析器中配合使用
 * *Modified by wangchen 2018/5/10
 * *取消以前使用单例对象的模式，改用标签name对应class，同时记录dom上带有id属性的组件对象，
 * 业务js可以使用getComObjectByDomId方法获取该组件对象
 */
import ESelect from "./select/ESelect";
import ERadio from "./radio/ERadio";
import ECheckbox from "./checkbox/ECheckbox";
import EDaterangepicker from "./date/EDaterangepicker";
import EDatetimepicker from "./date/EDatetimepicker";
import EPopu from "./popu/EPopu";
import EPoptree from "./popu/tree/EPoptree";
import EPoptreelist from "./popu/treelist/EPoptreelist";
import ETreelist from "./treelist/ETreelist";
import EAttach from "./attach/EAttach";
import EpanelViewSingle from "./view/single/EPanelViewSingle";
// import PopHandler from "./popu/Handler";
// import PoptreelistHandler from "./popu/treelist/Handler";
// import handlerManager from "../handler/HandlerManager";


const comsMap = new Map();
const comInstancesMap = new Map();
export default {
    /**
     * 初始化框架中的基本组件
     */
    initComponents: function() {
        this.add(ESelect);
        this.add(ERadio);
        this.add(ECheckbox);
        this.add(EDaterangepicker);
        this.add(EDatetimepicker);
        this.add(EPopu);
        this.add(EPoptree);
        this.add(EPoptreelist);
        this.add(ETreelist);
        this.add(EAttach);
        this.add(EpanelViewSingle);
        // handlerManager.staticImport({"/component/popu":new PopHandler({})});
        
    },
    /**
     * 添加组件
     */
    add: function(clazz) {
        if (typeof(clazz) != 'undefined' && clazz != null ) {
            comsMap.set(clazz.instance().name, clazz);
            /*let registName = "core/components/html/"+com.eventName;
            handlerManager.staticImport({registName:com});*/
        } else {
            throw new Error("你添加的组件不符合要求，无法进行添加");
        }
    },

    /**
     * 获取所有分析器
     * @returns {Array}
     */
    getAll: function() {
        return [...comsMap.values()];
    },

    getAllComNames: function() {
        return [...comsMap.keys()];
    },

    /**
     * 是否存在
     * @param name
     */
    has: function(name) {
        return comsMap.has(name);
    },
    /**
     * 根据name获取组件对象
     */
    get: function(name) {
        // return comsMap.get(name);
        let clazz = comsMap.get(name);
        return new clazz();
    },
    /**
     * 根据标签的name获取组件的class
     * @param name
     * @returns {V}
     */
    getComClass:function (name) {
        return comsMap.get(name);;
    },
    /**
     * 根据dom的id获取对应的控件对象
     * @param id
     * @returns {V}
     */
    getComObjectByDomId(id){
        return comInstancesMap.get(id);
    },

    /**
     * 根据dom元素获取组件对象
     */
    getByDom: function(dom) {
        let ccName = this.getTagClassName(dom);
        return this.get(ccName);
    },

    /**
     * 根据标签获取对应的组件class名称
     */
    getTagClassName(dom) {
        let tg = $(dom).prop('tagName');
        // let className = tg.toLowerCase().replace('e-','');
        let className = tg.toLowerCase();
        return className;
    },
    //首字母大写
    capUpperCase(str) {
        return str.toLowerCase().replace(/( |^)[a-z]/g, (L) => L.toUpperCase());
    },
    /**
     * 将传入的dom元素根据标签自动调用相应的组件进行html渲染
     * @para:dom
     */
    renderHtml(dom) {
        let com = this.getByDom(dom);
        let id = dom.id;
        if(typeof(id)!='undefined'){
            comInstancesMap.set(id,com);
        }
        let args = {
            el: dom
        };
        com.reWriteHtml(args);
    }
};
