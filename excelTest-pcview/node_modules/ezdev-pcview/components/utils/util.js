/***
 * @描述：工具类，用于提取组件中可以复用的代码
 * @author:create by wangchen 2017.8.21
 */
export default {

	//多个value中是否匹配val
    valuesMatch:function(valueArrs, val) {

        if (typeof(valueArrs) != 'undefined' && valueArrs != null && valueArrs.length > 0) {
            if (valueArrs instanceof Array) {
                let i = valueArrs.findIndex(function(value, index, arr) {
                    return value == val;
                });
                if (i > -1) {
                    return true;
                }
            } else {
                return valueArrs == val;
            }

        }
        return false;
    },
    //该方法用于兼容当前后台多种数据格式，并统一输出为data.data的形式
    findData(data) {
        if ((typeof(data.data) != 'undefined') && (data.data instanceof Array)) {
            return data;
        }else if ((typeof(data.content) != 'undefined') && (data.content instanceof Array)) {
            data.data = data.content;
            return data;
        } else if ((typeof(data.data) == 'object') && data.data!=null && typeof(data.data.data) != 'undefined' && (data.data.data instanceof Array)) {
            return data.data;
        }else if ((typeof(data.data) == 'object') && data.data!=null && typeof(data.data.content) != 'undefined' && (data.data.content instanceof Array)) {
            data.data.data = data.data.content;
            return data.data;
        }else {
            return data;
        }
        return {};
    },
    //如果需要查询页面设置参数，则进行参数处理，最后生成对应的隐藏域
    formhiddenSet(args) {
        if (typeof(args.queryStaticParam) != 'undefined' && args.queryStaticParam.indexOf(":") > 0) {
            let params = [];
            let queryParamArrs = args.queryStaticParam.split(',');
            let p = null;
            for (let v of queryParamArrs) {
                if (v.indexOf(':') > -1) {
                    p = v.split(':');
                    params.push({
                        name: p[0],
                        val: p[1]
                    });
                }
            }
            args.formhiddens = params;
        } else {
            args.formhiddens = [];
        }
        return args;
    },

    //条件设置，在index页面生成条件查询
    queryConditionSet(args) {
        if (typeof(args.queryParam) != 'undefined' && args.queryParam.length > 0) {
            let formConditions = args.queryParam.split(',');
            let formConditionNames = args.queryParamName.split(',');
            let conditions = [];
            for (let i = 0; i < formConditions.length; i++) {
                conditions.push({
                    name: formConditionNames[i],
                    code: formConditions[i]
                });
            }

            args.conditions = conditions;
        }

        return args;

    },
    /**
     * 设置左边tree和右边list直接的参数联系
     * @param args
     * @returns {*}
     */
    setArgsTreeListPara(args){
        if (typeof(args.queryTreeListParam) != 'undefined' && args.queryTreeListParam.indexOf(":") > 0) {
            let params = [];
            let queryTreeListParam = args.queryTreeListParam.split(',');
            let p = null;
            for (let v of queryTreeListParam) {
                if (v.indexOf(':') > -1) {
                    p = v.split(':');
                    params.push({
                        tree: p[0],//对应左边树节点上的数据熟悉
                        list: p[1],//对应右边list上input域上的name
                        listid:p[1].replaceAll('\\.','_')//对应右边list上input域上的id
                    });
                }
            }
            args.treeListPara = params;
        }
        return args;
    },
    /**
     * 设置点击节点修改滚动条位置
     * @param parentId
     * @param event
     */
    setClickNodeScrollPos(parentId,event){
        let treeLeftX =  $('#'+parentId).offset().left
        document.getElementById(parentId).scrollLeft=(event.clientX-treeLeftX);//设置滚动条到
    },
    eventType:{
        "onCheck":"onCheck",//选中复选框事件
        "onUncheck":"onUncheck",//勾掉复选框事件
        "onSelected":"onSelected",//选中行事件
        "onOk":"onOk"//点击ok按钮事件
    }


}