/**
 * Created by wangchen on 2017/10/13.
 * 列表动态列展示功能
 */
import Handler from "../../handler/Handler";
import Table from "../table/Table";
import config from "../../Config";
import ajaxRequest from "../../ajax/AjaxRequest";
import cacheUtils from "../../cache/CacheUtils";
import util from "../utils/util"

export default class DynamicListHandler extends Handler{

    constructor(options) {
        super(options);
        this.resolveTpl = options.resolveTpl;
    }

    /**
     * 实现查询功能
     * @param args getSelectedVals checkboxClick
     * {url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}
     */
    search(args) {
        this.contentId = args.mcid;
        args.form = args.form || args.mcid+'_searchForm';
        let that = this;
        if (args.url) {
            args.contentId = args.contentId || config.listId;
            args = this.parseDisplayColumns(args);
            let form = args.form;
            if(typeof(args.form)=='string'){
                form = $(`#${args.form}`);
            }
            if (form.length > 0) {
                args.data = form.serialize();
                args.tpl = args.tpl || config.listTpl;
                this.fetchData(args).then((data) => {
                    let theadHtml = this.renderListTheadHtml(data, args);
                    let tbodyHtml = this.renderListTBodyHtml(data, args);
                    args.url2 = args.url;//save url
                    args.url = null;//防止render执行url
                    args.data = data;
                    args.data.theadHtml = theadHtml;
                    args.data.tbodyHtml = tbodyHtml;
                    args.data.id = args.elId;
                    args.data.mcid = args.mcid;
                    // args.data.tableHtml=tableHtml;
                    return this.render(args).then(function(data) {
                        //由于直接用arttemplate输出的html片段会被双引号包裹，导致页面不能正常显示，所以在render后用js添加
                        //给table加行点击效果
                        this.tableRowClick(form.find('table'),args);
                        //给复选框添加点击事件
                       this.checkboxClick(args);
                        args.url = args.url2;
                        new Table({
                            pageID: this.getContainerId('pager'),
                            sortID:this.getContainerId('sort'),
                            pageNum: data.pageNum,
                            totalPages: data.totalPages,
                            totalSize: data.totalSize,
                            pageSize: data.pageSize,
                            buttonClickCallback: this.search.bind(this, args)
                        });
                    }.bind(this));

                });


            } else {
                throw new Error("参数无效，DOM中无法找到id为[" + args.form + "]的Form！");
            }

        } else {
            throw new Error("参数无效，请传递如{url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}的JS对象");
        }

    }

    //解析要显示的字段
    parseDisplayColumns(args) {
        let columns = [];
        if (typeof(args.displayColumns) != 'undefined' && args.displayColumns.length > 0 &&
            typeof(args.displayColumnnames) != 'undefined' && args.displayColumnnames.length > 0) {
            let displayColumns = args.displayColumns.split('#');
            let displayColumnnames = args.displayColumnnames.split('#');
            for (let i = 0; i < displayColumns.length; i++) {
                columns.push({
                    "code": displayColumns[i],
                    "name": displayColumnnames[i]
                });
            }
        } else {
            columns.push({
                "code": args.optionValue,
                "name": args.optionValueTitle
            });
            columns.push({
                "code": args.optionText,
                "name": args.optionTextTitle
            });
        }
        args.columns = columns;

        return args;
    }

    //生成选择列表中table的tbody的html
    renderListTBodyHtml(data, args) {
        let multiple = args.multiple;
        let tbodyHtml = [];
        let columns = args.columns;
        if (data.totalSize == 0) {
            tbodyHtml.push(`<tr><td class="lefttd" colspan="${columns.length}">没有数据</td></tr>`);
        } else {
            let map = new Map();
            for (let val of data.data) {
                tbodyHtml.push(
                    `<tr role="row" class="odd" code="${val[args.optionValue]}" text="${val[args.optionText]}" >`
                );
                map.set(val[args.optionValue],val);
                if (typeof(multiple) != 'undefined' && multiple != '') {
                    // tbodyHtml.push(`>`);
                    tbodyHtml.push(`<td ><input type="checkbox" class="popck"`);
                    // tbodyHtml.push(`e-event="href:/component/popu/clickChk?code=${val[args.optionValue]}`);
                    // tbodyHtml.push(`&text=${val[args.optionText]}&&elId=${args.elId}&layerId=${args.layerId}" `);
                    tbodyHtml.push(`code="${val[args.optionValue]}" text="${val[args.optionText]}" `);
                    tbodyHtml.push(`/></td>`);
                } else {
                   /* tbodyHtml.push(
                        `style="cursor:pointer" e-event="href:/component/popu/clickone?code=${val[args.optionValue]}`
                    );
                    tbodyHtml.push(
                        `&text=${val[args.optionText]}&&elId=${args.elId}&layerId=${args.layerId}" `
                    );
                    tbodyHtml.push(`>`);*/
                }

                for (let col of columns) {
                    tbodyHtml.push(`<td>${val[col.code]}</td>`);
                }
                tbodyHtml.push(
                    ` </tr> `
                );

            }
            args.dataMap = map;//将每一行的data对应code为key放入map中，目前在后面的行选中事件中可以取出作为参数提供给应用方
        }
        //tbodyHtml.push('</tbody>');
        return tbodyHtml.join('');
    }

    //生成选择列表中table的thead的html
    renderListTheadHtml(data, args) {
        let multiple = args.multiple;
        let theadHtml = [];
        let columns = args.columns;
        theadHtml.push(`<tr role="row">`);
        if (typeof(multiple) != 'undefined' && multiple != '') {
            //theadHtml.push(`<th><input type="checkbox"/></th>`);
            theadHtml.push(`<th>选择</th>`);
        }
        for (let col of columns) {
            //theadHtml.push(`<th class="sorting" sort="${col.code}">${col.name}</th>`);
            theadHtml.push(`<th>${col.name}</th>`);
        }
        theadHtml.push(`</tr>`);
        return theadHtml.join('');
    }

    /**
     * 获取下拉框所需要的数据
     * @param args
     * @returns {Promise}
     */
    fetchData(args) {
        return new Promise((resolve) => {
            let cacheData = cacheUtils.get(args.unique);
            if (cacheData) {
                resolve(cacheData);
            } else if (typeof(args.url) != 'undefined' && args.url != '') {
                ajaxRequest.ajax(args).then((data) => {
                    if (data) {
                        data = util.findData(data);
                        resolve(data);
                        if (typeof(args.unique) != 'undefined') {
                            cacheUtils.push(args.unique, data)
                        }
                    }

                });
            } else {
                resolve(null);
            }
        });
    }

    /**
     * 复选框添加事件效果
     * @param args
     */
    checkboxClick(args){
        let multiple = args.multiple;
        if (typeof(multiple) == 'undefined' || multiple == '') {//如果不是多选
            return;
        }
        let matchVals;
        if(typeof(args.getSelectedVals)=='function'){
            // let disVals = that.getBackDisplay(args.elId);
            let disVals = args.getSelectedVals(args);//获取表单中已经选中的值
            matchVals = disVals.split(',');
        }
        $('.popck').each(function() {
            let $this = $(this);
            if (typeof(matchVals) != 'undefined' && matchVals.length > 0) {
                let code = $this.attr('code');
                if (util.valuesMatch(matchVals, code)) {
                    $this.attr('checked', true);
                } else {
                    $this.removeAttr('checked');
                }
            }

            $this.on('click', function(event) {
                let code = $this.attr('code');
                let data = args.dataMap.get(code);
                let chkArgs = {
                    text: $this.attr('text'),
                    code: code,
                    data: data,
                    checked: $this.is(':checked')
                };

                let $domValHid =  $('#'+args.elId+'_select_values_hidden');
                let $domTxtHid =  $('#'+args.elId+'_select_texts_hidden');
                if($domValHid.length>0){
                    let hidval = $domValHid.val();
                    let hidtxt = $domTxtHid.val();
                    let hidvalArr = hidval.split(',');
                    let hidtxtArr = hidtxt.split(',');
                    let valIndex = hidvalArr.indexOf(chkArgs.code);
                    if(chkArgs.checked){
                        if(valIndex==-1){
                            hidvalArr.push(chkArgs.code);
                            hidtxtArr.push(chkArgs.text);
                        }
                    }else{
                        if(valIndex > -1){
                            hidvalArr.splice(valIndex,1);
                            hidtxtArr.splice(valIndex,1);
                        }
                    }
                    $domValHid.val(hidvalArr.join(','));
                    $domTxtHid.val(hidtxtArr.join(','));
                }
                if (typeof(args.checkboxClick) == 'function') {
                    args.checkboxClick(chkArgs, this,args);
                }
            });


        });
    }

    /***
     * table tr 单击后效果
     * @param table
     */
    tableRowClick(table,args){
        let multiple = args.multiple;
        if (typeof(multiple) != 'undefined' && multiple != '') {//如果是多选
            return;
        }

        let matchVals = null;
        if(typeof(args.getSelectedVals)=='function'){
            matchVals = args.getSelectedVals(args);//获取表单中已经选中的值
        }
        let data = args.data;
        if (data.totalSize == 0) {//如果没有数据则不添加选中事件
            return;
        }
        table.find('tbody tr').each(function () {
            let $this = $(this);
            if(typeof(matchVals)!='undefined' && matchVals != null && $this .attr('code') == matchVals){
                $(this).addClass('success');
            }
            $this.on('click', function (){
                table.find('.success').removeClass('success');//去除之前选中的行的，选中样式
                $(this).addClass('success');//添加当前选中的 success样式用于区别
                let code = $this.attr('code');
                let valData = args.dataMap.get(code);
                let rowArgs = {
                    text: $this.attr('text'),
                    code: code,
                    data: valData
                };

                $('#'+args.elId+'_select_values_hidden').val(rowArgs.code);
                $('#'+args.elId+'_select_texts_hidden').val(rowArgs.text);

                if (typeof(args.rowClick) == 'function') {
                    args.rowClick(rowArgs, this,args);
                }
            });
        })
    }
}