/***
 * @描述：treelist类，继承BaseComponent
 * @author:create by wangchen 2017/10/13.
 * @用途：可以根据定位目标元素和数据渲染左边树形右边列表的展示
 * @使用中注意点如下：
 * 标签名称e-treelist
 * 使用实例如下：
 <e-treelist id="treelist1" name="treelist1"
 e-tree-url="/system/core/organization/list"
 e-list-url="/system/core/user/list"
 e-option-value="account" e-option-text="name"
 e-option-text-title="名称3"  e-title="弹出页面tree1"
 e-data-id="id" e-data-parent-id="pId"
 e-display-columns="account,name,orgName"
 e-display-columnnames="登录账户,用户名称,所属机构"
 e-chkbox-type="1"
 e-expand-level="0"
 e-width="1000px" e-height="300px" e-com-height="500px"
 e-value="test" e-value-name="测试用户"
 e-multiple="multiple"
 e-query-param = "search_LIKE_name,search_LIKE_account"
 e-query-param-name = "用户名,账户"
 e-query-tree-list-param = "id:search_LIKE_organization.orgPath"
 >
 </e-treelist>
 * 类中的属性标签：
 * e-expand-level       展开级别，默认0
 * e-option-value-title 数据中编码的字段名称，默认“编码”
 * e-option-value       数据中的编码字段code，默认“code”
 * e-option-text-title  数据中的编码对应的汉字的字段名称，默认“名称”
 * e-option-text        数据中的编码对应的汉字的字段code ，默认“value”
 * e-data-id            数据中的唯一标识字段，默认“id”
 * e-data-parent-id     数据中上级的唯一标识字段，默认“pId”
 * e-title              弹出窗口标题，默认“信息”
 * e-query-param        查询地址如果是post提交所需要的表单参数（如果没有参数可不填）
 * e-width              弹出窗口宽度，默认800px
 * e-height             弹出窗口高度，默认600px
 * 必填的html原生属性
 * id,name

 * 注意：如果需要设置某个节点默认展开，请在data数据中设置open属性为true
 * 考虑在url的上级span添加style="height: 500px"控制
 */
import BaseComponent from "../BaseComponent";
import ETreeListHandler from "./ETreeListHandler";
import handlerManager from "../../handler/HandlerManager";
import util from "../utils/util";
import  "ztree/css/zTreeStyle/zTreeStyle.css";
import "ztree";

'use strict';
let __instance = null;
export default class ETreeList extends BaseComponent{
    constructor() {
        super();
        this.name = 'e-treelist';
        this.handler = new ETreeListHandler({});
        this.handler.id = this.id;
        handlerManager.staticImportByName(this.id,this.handler);
        // this.multiple = new Multiple();
    }

    static instance() {
        if (__instance == null) {
            __instance = new ETreeList();
            // __instance.handler = new ETreeListHandler({});
            // __instance.handler.id = __instance.id;
            // let id = __instance.id;
            // let arg ={id  : __instance.handler}
            // handlerManager.staticImportByName(id,__instance.handler);
           /* handlerManager.staticImport({
                id  : __instance.handler
            })*/
        }
        return __instance;
    }

    /**
     * @Override
     */
    setArgsBeforeRw(args, options) {
        args = super.setArgsBeforeRw(args, options);

        args.optionValue = args.optionValue || "code";
        args.optionText = args.optionText || "value";
        args.optionValueTitle = args.optionValueTitle || "编码";
        args.optionTextTitle = args.optionTextTitle || "名称";
        args.queryParam = args.queryParam || '';
        args.queryParamName = args.queryParamName || '';
        args.displayColumns = args.displayColumns || '';
        args.displayColumnnames = args.displayColumnnames || '';
        args.displayColumns = args.displayColumns.replaceAll(',', '#');
        args.displayColumnnames = args.displayColumnnames.replaceAll(',', '#');
        args.id = args.id || args.name;
        args.popuUrl = args.url;
        delete args.url; //防止后面操作误用到了url属性，删除掉
        //隐藏域设置
        args = util.formhiddenSet(args);
        args = util.queryConditionSet(args);
        args.dataId = args.dataId || "id";
        args.dataParentId = args.dataParentId || "pId";
        args.treeId = 'leftTree_'+args.id;
        args = util.setArgsTreeListPara(args);
        args.listId = 'rightsearchlist_'+args.id;
        return args;
    }



    /**
     * @Override
     */
    generateHtml(args) {
        args.handlePath = this.id;
        return this.resolveTpl("index")(args || {handlePath: this.id});
    }

    /**
     * @Override
     */
    executeAferRw(args) {
        this.handler.initTree(args);

    }



    resolveTpl(tpl) {
        return require("./tpl/" + tpl + ".html");
    }

}
