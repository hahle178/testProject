
/**
 * @描述：事件类，继承Handler
 * Created by wangchen on 2017/10/16.
 * ETreeList对应的Handler，用于事件
 * 重写resolveTpl方法，initTree方法
 */
import Handler from "../../handler/Handler";
import HtmlUtils from "../../utils/HtmlUtils";
import DynamicListHandler from "../utils/DynamicListHandler";//动态列显示列表hander
import util from "../utils/util";

export  default class ETreeListHandler extends Handler {

    constructor(options) {
        super(options);
        this.dynamicListHandler = new DynamicListHandler({resolveTpl:this.resolveTpl});
        // handlerManager.staticImportByName(options.id,this.dynamicListHandler);
    }

    resolveTpl(tpl) {
        return require("./tpl/" + tpl + ".html");
    }


    /**
     * 实现查询功能
     * @param args
     * {url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}
     */
    search(args) {
        args.mcid = this.mcid;
        return this.dynamicListHandler.search(args);
    }

    /**
     * Index页面组织树初始化
     */
    initTree(args) {
        // this.options1();
        $.ajax({
            cache: false,
            type: "POST",
            url: args.treeUrl,
            dataType: "json",
            success: function (data) {
                $.fn.zTree.init($('#' + args.treeId), this.ztreeSetting(args), data.data);
                var zTree = $.fn.zTree.getZTreeObj(args.treeId);
                var root = zTree.getNodeByParam("id", "root");
                zTree.selectNode(root, false);
                //zTree.expandAll(true);
                zTree.expandNode(root, true, false, false);  //默认展开第一级
            }.bind(this)
        });
    }

    /**
     * 组织机构树配置
     */
    ztreeSetting(args) {
        // this.options1();
        return {
            check: {
                enable: false
            },
            data: {
                simpleData: {
                    enable: true
                }
            },
            callback: {
                onClick: function (event, treeId, treeNode) {
                    util.setClickNodeScrollPos(treeId,event);
                    let $form = $(event.target).parents('form.treeListForm');
                    let treeListPara = args.treeListPara;
                    if(typeof(treeListPara)!='undefined' && treeListPara.length > 0){
                        for (let v of treeListPara) {
                            //将点击树节点的属性设置到list页面的隐藏域中
                            $form.find("#"+v['listid']).val(treeNode[v["tree"]]);
                        }
                    }
                    let $sbtn = $form.find('#treelistSearchBtn[operation="search"]');
                    // let $sbtn = $('#treelistSearchBtn[operation="search"]');
                    let searchArgs = HtmlUtils.getArgsByItem($sbtn);
                    searchArgs.form = $form;
                    this.search(searchArgs);
                }.bind(this)
            },
            view: {
                fontCss: function (treeId, treeNode) {
                    return (!!treeNode.highlight) ? {color: "blue", "font-weight": "bold"} : {
                        color: "#000",
                        "font-weight": "normal"
                    };
                },
                selectedMulti: false
            }
        }
    }


}