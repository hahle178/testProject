/***
 * @描述：弹窗类，继承EPopu
 * @author:create by wangchen 2017.8.4
 * @用途：可以根据定位目标元素和数据渲染下拉框
 * @使用中注意点如下：
 * 标签名称e-poptreelist
 * 使用实例如下：
 <e-poptreelist id="poputreelist1" name="poputreelist1"
 e-tree-url="/test/core/organization/list"
 e-list-url="/test/core/user/list"
 e-option-value="account" e-option-text="name"
 e-option-text-title="名称3"  e-title="弹出页面tree1"
 e-data-id="id" e-data-parent-id="pId"
 e-display-columns="account,name,orgName"
 e-display-columnnames="登录账户,用户名称,所属机构"
 e-chkbox-type="1"
 e-expand-level="0"
 e-width="1000px" e-height="300px" e-com-height="500px"
 e-value="test" e-value-name="测试用户"
 e-multiple="multiple"
 e-query-param = "search_LIKE_name,search_LIKE_account"
 e-query-param-name = "用户名,账户"
 e-query-tree-list-param = "id:search_LIKE_organization.orgPath"
 >
 </e-poptreelist>
 * 类中的属性标签：
 * e-expand-level       展开级别，默认0
 * e-option-value-title 数据中编码的字段名称，默认“编码”
 * e-option-value       数据中的编码字段code，默认“code”
 * e-option-text-title  数据中的编码对应的汉字的字段名称，默认“名称”
 * e-option-text        数据中的编码对应的汉字的字段code ，默认“value”
 * e-data-id            数据中的唯一标识字段，默认“id”
 * e-data-parent-id     数据中上级的唯一标识字段，默认“pId”
 * e-title              弹出窗口标题，默认“信息”
 * e-query-param        查询地址如果是post提交所需要的表单参数（如果没有参数可不填）
 * e-width              弹出窗口宽度，默认800px
 * e-height             弹出窗口高度，默认600px
 * 必填的html原生属性
 * id,name
 * 回调函数：
 * onCheck            多选情况下，选中复选框时触发，可以从注册的函数参数中获取到选中行的data，
 *                     testCheck(args) args.data极为该行数据
 * onUncheck          多选情况下，复选框取消选中时触发，其他用法同上
 * onSelected         单选情况下，选中行事件
 * 注意：如果需要设置某个节点默认展开，请在data数据中设置open属性为true
 * 考虑在url的上级span添加style="height: 500px"控制
 */
import EPopu from "../EPopu";
import handlerManager from "../../../handler/HandlerManager";
import PoptreelistHandler from "./EpoptreelistHandler";
// import ETreeListHandler from "../../treelist/ETreeListHandler";
import util from "../../utils/util"
import  "ztree/css/zTreeStyle/zTreeStyle.css";
import "ztree";

'use strict';
let __instance = null;
export default class EPoptreelist extends EPopu {
    constructor() {
        super();
        this.name = 'e-poptreelist';
        this.handler = new PoptreelistHandler({});
        handlerManager.staticImportByName(this.id,this.handler);
    }

    static instance() {
        if (__instance == null) {
            __instance = new EPoptreelist();
            // __instance.handler = new PoptreelistHandler({});
            // __instance.handler = new ETreeListHandler({});

            /*handlerManager.staticImport({
                 "/component/popu/treelist": __instance.handler
            })*/
        }
        return __instance;
    }

    resolveTpl(tpl) {
        return require("./tpl/" + tpl + ".html");
    }

    /**
     * @Override
     */
    setArgsBeforeRw(args, options) {
        args = super.setArgsBeforeRw(args, options);
        args.dataId = args.dataId || "id";
        args.dataParentId = args.dataParentId || "pId";
        args.treeId = 'orgTree_'+args.id;
        args = util.setArgsTreeListPara(args);//设置左边tree和右边list直接的参数联系
        args.listId = 'comsearchlist_'+args.id;
        return args;
    }


    /**
     * @Override
     */
    executeAferRw(args) {
        let content = args.content;//设置按钮click事件
        $('#'+args.id+'_hid').data('args',args);
        content.find('button').on('click', (e) => {
            args.tpl = 'index';
            this.dialog(args);
            this.handler.initTree(args);
        });
        if (typeof(args.value) != 'undefined' && args.value.length > 0) {
            args.popuUrl = args.listUrl;
            this.setDefaultBackDisplay(args);
        }

        super.setValidform(args);

    }


}
