/***
 * @描述：弹窗类，继承BaseComponent
 * @author:create by wangchen 2017.8.4
 * @用途：可以根据定位目标元素和数据渲染下拉框
 * @使用中注意点如下：
 * 标签名称e-popu
 * 使用实例如下：
 <e-popu id="popu1" name="popu1" e-url="/test/dictionary/getChildrenByCode/pages"
 e-unique="gwType" e-option-value-title="编码2" e-option-value="code"
 e-option-text-title="名称3" e-option-text="value" e-title="弹出页面1"
 e-query-static-param="code:gwType"
 e-query-param = "search_code,search_value"
 e-query-param-name = "编码1,名称"
 e-width="800px" e-height="500px"
 e-display-columns="value,code"
 e-display-columnnames="单位名称,单位编码"
 e-value="gl"
 e-value-name="管理"
 >
 </e-popu>
 * 类中的属性标签：
 * e-option-value-title 选中数据显示的列的名称的标题
 * e-option-value       选中数据显示的列编码字段code，默认“code”
 * e-option-text-title  选中数据对应的汉字的字段名称，默认“名称”
 * e-option-text        选中数据的编码对应的汉字的字段code ，默认“value”
 * e-title              弹出窗口标题，默认“信息”
 * e-query-static-param 查询地址如果是post提交所需要的表单固定参数（如果没有参数可不填）
 * e-query-param        查询条件（如果没有参数可不填）
 * e-query-param-name   查询条件名称（如果没有参数可不填）
 * e-display-columns    列表中显示的列的code
 * e-display-columnnames列表中显示的列的名称，顺序与e-display-columns中对应的元素相同
 * e-value              控件默认显示值，多个值用“,”隔开
 * e-value-name         控件默认显示值对应的名称，多个值与e-value的元素对应
 * e-multiple="multiple"标识列表为多选
 * e-width              弹出窗口宽度，默认800px
 * e-height             弹出窗口高度，默认600px
 * e-z-index            弹出窗口高度zIndex设置
 * e-shade              弹出窗口遮罩设置，语法与layer同，例如e-shade="[0.8, '#393D49']
 * e-offset             弹出窗口弹出位置坐标设置，语法与layer同，但是目前未知原因，不起效果
 * 必填的html原生属性
 * id,name
 * e-on-check
 * e-on-uncheck
 */
import BaseComponent from "../BaseComponent";
import renderer from "../../render/Renderer";
import PopHandler from "./EPopuHandler";
import handlerManager from "../../handler/HandlerManager";
import util from "../utils/util"
import Multiple from "../utils/multiple/Multiple"

'use strict';
let __instance = null;
export default class EPopu extends BaseComponent {

    constructor() {
        super();
        this.name = 'e-popu';
        this.handler = new PopHandler({});
        this.handler.id = this.id;
        handlerManager.staticImportByName(this.id,this.handler);
        this.multiple = new Multiple();
    }

    static instance() {
        if (__instance == null) {
            __instance = new EPopu();
            /*__instance.handler = new PopHandler({});
            handlerManager.staticImport({
                "/component/popu": __instance.handler
            });*/
        }
        return __instance;
    }

    /**
     * @Override
     */
    setArgsBeforeRw(args, options) {
        args = super.setArgsBeforeRw(args, options);
        //如果valueName中用”,“隔开字符串，说明有多个值，valueName为数组
        if (typeof(args.valueName) == 'string' && args.valueName != '') {
            if (args.valueName.indexOf(',') > 0) {
                args.valueName = args.valueName.split(',');
            }

        } else { //如果没有回显对应的汉字名称，则需要根据接口地址去获取
            args = this.fetchValueNames(args);
        }
        args.optionValue = args.optionValue || "code";
        args.optionText = args.optionText || "value";
        args.optionValueTitle = args.optionValueTitle || "编码";
        args.optionTextTitle = args.optionTextTitle || "名称";
        args.queryParam = args.queryParam || '';
        args.queryParamName = args.queryParamName || '';
        // args.queryParam = args.queryParam.replaceAll(',', '#');
        //args.queryParamName = args.queryParamName.replaceAll(',', '#');
        args.displayColumns = args.displayColumns || '';
        args.displayColumnnames = args.displayColumnnames || '';

        args.displayColumns = args.displayColumns.replaceAll(',', '#');
        args.displayColumnnames = args.displayColumnnames.replaceAll(',', '#');


        args.popuUrl = args.url;
        delete args.url; //防止后面操作误用到了url属性，删除掉
        //隐藏域设置
        args = util.formhiddenSet(args);
        args = util.queryConditionSet(args);


        return args;
    }

    //根据对应的获取名称的接口获取values names
    fetchValueNames(args) {
        let that = this;
        if (typeof(args.valueNameUrl) == 'string') {
            this.fetchData({
                url: args.valueNameUrl
            }).then(function(data) {
                if (typeof(data.data) != 'undefined') {
                    let d = data.data;
                    if(typeof(d) == 'undefined' || d == null){
                        return;
                    }
                    let arrs = [];
                    if (d instanceof Array) {
                        let vals = args.value;
                        vals = typeof(vals)=='string'?[vals]:vals;
                        for (let val of vals) {
                            for (let i = 0; i < d.length; i++) {
                                if (d[i] != null && d[i][args.optionValue] == val) {
                                    arrs.push(d[i][args.optionText]);
                                    d[i] == null;
                                }
                            }
                        }
                        args.valueName = arrs;
                    } else {
                        args.valueName = d[args.optionText];
                    }
                    that.setDefaultBackDisplay(args);
                }
            });
        }
        return args;
    }


    /**
     * @Override
     */
    generateHtml(args) {
        let dis = this.multiple.generateHtml(args.id, args.name);
        let btnData = {
            id: args.id,
            name: args.name,
            url: args.url,
            disHtml: dis,
            handlePath : this.id
        };
        // btnData.handlePath = this.id;
        return this.getBtnTl()(btnData || {});
    }

    getBtnTl() {
        return this.resolveTpl("epopu_btn");
    }

    /**
     * @Override
     */
    executeAferRw(args) {
        let content = args.content;
        $('#'+args.id+'_hid').data('args',args);
        content.find('button').on('click', (e) => {
            args.tpl = 'index';
            this.dialog(args);

        });
        if (typeof(args.value) != 'undefined' && args.value.length > 0) {
            this.setDefaultBackDisplay(args);
        }
        this.setValidform(args);
    }

    /**
     * 设置表单validform校验
     * @param args
     */
    setValidform(args){
        let attrs = args['attributes'];
        let datatype = null;
        if (typeof(attrs.datatype) != 'undefined' && attrs.datatype != '') {
            datatype = attrs.datatype;
        }
        this.multiple.setValidform(args.id,datatype);

    }

    //根据设置的value值，在回显控件显示
    setDefaultBackDisplay(args) {
        let that = this;
        let txts = [],
            vals = [];
        if (typeof(args.value) == 'undefined' || args.value == '') {
            return;
        }
        if ((args.value instanceof Array) && (args.valueName instanceof Array)) {
            let values = args.value;
            let names = args.valueName;
            for (let i = 0; i < values.length; i++) {
                txts.push(names[i]);
                vals.push(values[i]);
            }
        } else {
            txts.push(args.valueName);
            vals.push(args.value);
        }

        that.multiple.setBackDisplay(args.id, txts, vals);

    }

    /**
     * @Override
     * 弹出信息框
     * @param args
     * {dialog:confirm,type:post-(默认),isReload:true-(默认),url:/demo/mybatisuser/pages-(可选)}
     */
    dialog(args) {
        let zIndex = args.zIndex || 1;
        let offset = args.offset;
        let resizeArg = args.resize || true;
        let maxminArg = args.maxmin || true;
        let maxmin;
        if(typeof(args.maxmin) != 'undefined'){
            maxmin = (maxminArg === 'true' );
        }else{
            maxmin = maxminArg;
        }
        let resize;
        if(typeof(args.resize) != 'undefined'){
            resize = (resizeArg === 'true' );
        }else{
            resize = resizeArg;
        }

        let layerArgs = {
            shade: "0",
            zIndex: zIndex,
            type: 1,
            resize:resize,
            maxmin: maxmin,
            title: args.title || '信息',
            area: [args.width || '800px', args.height || '600px'] //宽高
        };
        if(typeof(offset)!='undefined'){
            if(args.offset.indexOf(']')>0){
                args.offset = eval(args.offset);
            }
            layerArgs.offset = offset;
        }
        if(typeof(args.move)!='undefined'){
            layerArgs.move = args.move;
        }
        if(typeof(args.shade)!='undefined'){
            if(args.shade.indexOf(']')>0){
                args.shade = eval(args.shade);
            }
            layerArgs.shade = args.shade;
        }
       // alert(layerArgs.shade);
        let layerId = layer.open(layerArgs);
        args.contentId = $('#layui-layer' + layerId).find('.layui-layer-content');
        args.layerId = layerId;
        args.data = args;
        args.handlePath = this.id;
        let  promise = this.render(args);
        return promise;
    }

    /**
     * @Override
     * 界面渲染
     * @param args
     * {tpl:list-(必选),type:post-(默认),url:/demo/mybatisuser/pages-(可选),contentId:content-wrapper-(默认)}
     */
    render(args) {
        if (args.tpl) {
            if (args.url) {
                args.url = this.ajaxBasePath ? this.ajaxBasePath + args.url : args.url;
            }
            return renderer.render(args, this.resolveTpl(args.tpl));
        } else {
            throw new Error("参数无效，请传递如{tpl:list-(必选),type:post-(默认),url:/demo/mybatisuser/pages-(可选),contentId:content-wrapper-(默认)}的JS对象");
        }

    }

    resolveTpl(tpl) {
        return require("./tpl/" + tpl + ".html");
    }



}
