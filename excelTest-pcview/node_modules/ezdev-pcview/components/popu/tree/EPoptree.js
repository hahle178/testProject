/***
 * @描述：弹窗类，继承EPopu
 * @author:create by wangchen 2017.8.4
 * @用途：可以用于表单控件弹出树状数据进行选择
 * @使用中注意点如下：
 * 标签名称e-poptree
 * 使用实例如下：
 <e-poptree id="poputree2" name="poputree2" e-url="/test/core/organization/list"  
                                e-unique="orgType"  e-option-value="orgCode" e-option-text="name"
                                e-option-text-title="名称3" e-option-text="value" e-title="弹出页面tree1"
                                e-data-id="id" e-data-parent-id="pId"
                                e-display-columns="name,orgCode,pId"
                                e-display-columnnames="单位名称,单位编码,父id"
                                e-width="400px" e-height="500px">
                                </e-poptree>
 * 类中的属性标签：
 * e-chkbox-type       选择方式：
   1：多选，叶子节点被返回（默认类型）
   2：多选，父节点或者叶子节点都返回
   3：单选，只能选中一个节点
   4：单选2，同一级目录只能选择一个
 * e-expand-level       展开级别，默认0
 * e-option-value-title 数据中编码的字段名称，默认“编码”
 * e-option-value       数据中的编码字段code，默认“code”
 * e-option-text-title  数据中的编码对应的汉字的字段名称，默认“名称”
 * e-option-text        数据中的编码对应的汉字的字段code ，默认“value”
 * e-data-id            数据中的唯一标识字段，默认“id”
 * e-data-parent-id     数据中上级的唯一标识字段，默认“pId”
 * e-title              弹出窗口标题，默认“信息”
 * e-query-param        查询地址如果是post提交所需要的表单参数（如果没有参数可不填）
 * e-width              弹出窗口宽度，默认800px
 * e-height             弹出窗口高度，默认600px
 * 必填的html原生属性
 * id,name
 * e-on-ok

 * 注意：如果需要设置某个节点默认展开，请在data数据中设置open属性为true
 * 考虑在url的上级span添加style="height: 500px"控制
 */
import EPopu from "../EPopu";
import handlerUtils from "../../../handler/HandlerUtils";
import util from "../../utils/util"
import  "ztree/css/zTreeStyle/zTreeStyle.css";
import "ztree";

'use strict';
let __instance = null;

export default class EPoptree extends EPopu {

    constructor() {
        super();
        this.name = 'e-poptree';
        this.tree = null;
        this.zTreeObj = null;
    }

    static instance() {
        if (__instance == null) {
            __instance = new EPoptree();
        }
        return __instance;
    }

    /**
     * @Override
     */
    setArgsBeforeRw(args, options) {
        args = super.setArgsBeforeRw(args, options);
        args.dataId = args.dataId || "id";
        args.dataParentId = args.dataParentId || "pId";
        args.displayColumns = args.displayColumns || '';
        args.displayColumnnames = args.displayColumnnames || '';
        args.displayColumns = args.displayColumns.replaceAll(',', '#');
        args.displayColumnnames = args.displayColumnnames.replaceAll(',', '#');
        return args;
    }

    resolveTpl(tpl) {
        return require("./tpl/" + tpl + ".html");
    }

    /**
     * @Override
     */
    executeAferRw(args) {
        let content = args.content;
        // $('#'+args.id+'_hid').data('args',args);
        content.find('button').on('click', (e) => {
            args.tpl = 'index';
            this.dialog(args);
            this.renderDialogHtml(args);

        });
        if (typeof(args.value) != 'undefined' && args.value.length > 0) {
            this.setDefaultBackDisplay(args);
        }

        super.setValidform(args);
    }

    /**
     * 树的弹出窗口
     */
    dialog(args) {
        let treeId = "epopTree_"+args.id;
        let that = this;
        let layerId = layer.open({
            shade: 0.5,
            zIndex: 1000,
            type: 1,
            move: args.move,
            title: args.title || '信息',
            area: [args.width || '400px', args.height || '600px'], //宽高
            content: '<ul id="'+treeId+'" class="ztree" ></ul>',
            btn: ['确定'],
            yes: function(index, layero) {
                let checkNodes = that.zTreeObj.getCheckedNodes(true);
                let txts = [];
                let vals = [];
                if (checkNodes && checkNodes.length > 0) {
                    for (let v of checkNodes) {
                        // if (!v.isParent) {
                        if (that.ifSelectNode(v, args)) {
                            /*txts.push(v['data'][args.optionText]);
                            vals.push(v['data'][args.optionValue]);*/
                            txts.push(v[args.optionText]);
                            vals.push(v[args.optionValue]);
                        }

                    }

                }
                that.multiple.setBackDisplay(args.id, txts, vals);
                layer.close(index);
                that.callback(checkNodes,args,util.eventType.onOk);
            }
        });
    }

    //是否是选中节点
    ifSelectNode(node, args) {
        let chkboxType = args.chkboxType || '1';
        let rs = true;
        switch (chkboxType) {
            case '1':
                rs = !node.isParent;
                break;
            case '2':
                rs = true;
                break;
            case '3':
                rs = true;
                break;
            case '4':
                rs = true;
                break;

        }

        return rs;
    }

    

    //从页面回显控件获取当前已有的值
    getBackDisplay(id) {
        return $('#' + id + '_hid').val();
    }

    



    //渲染弹出窗口内的html
    renderDialogHtml(args) {
        args.url = args.popuUrl;
        this.fetchData(args).then(function(data) {
            //args.data = this.sortData(data, args); //在这里重新组织数据
            args.data = this.beforeTreeinitDataChecked(data,args);//设置选择效果
            this.initTree(args.data.data, args);
        }.bind(this));
    }



    //初始化ztree前检查数据是否有需要被选中的
    beforeTreeinitDataChecked(data,args) {

        let content;
        if (typeof(data.data) != 'undefined') {
            content = data.data;
        }
        let disVals = this.getBackDisplay(args.id);
        let matchVals = disVals.split(',');
        if (typeof(matchVals) != 'undefined' && matchVals.length > 0) {
            for (let node of content) {
                let val = node[args.optionValue];
                if (util.valuesMatch(matchVals, val)) {
                    node['checked'] = true;
                }else{
                    node['checked'] = false;
                }

            }
        }
        return data;
    }


    //初始化树控件
    initTree(zNodes, args) {
        var setting = {
            check: {
                enable: true,
                chkStyle: "checkbox"

            },
            data:{
                simpleData:{
                    enable: true,
                    idKey:args.dataId,
                    pIdKey:args.dataParentId
                }
            },
            callback: {
                onClick: this.zTreeOnClick.bind(this)
            },
            view:{
                // fontCss : {fontSize:'16px'}
                fontCss: function(treeId, treeNode){
                    return (!!treeNode.highlight) ? {color:"blue", "font-weight":"bold"} : {color:"#000", "font-weight":"normal"};
                }
            }
        };
        if (typeof(args.chkboxType) != 'undefined') {

            if (args.chkboxType == 2) {
                setting.check.chkboxType = {};
                let chkType = setting.check.chkboxType;
                chkType['Y'] = ''; //p
                chkType['N'] = ''; //s
            } else if (args.chkboxType == 3) {
                setting.check.chkStyle = 'radio';
                setting.check.radioType = 'all';
            } else if (args.chkboxType == 4) {
                setting.check.chkStyle = 'radio';
                setting.check.radioType = 'level';
            }

        }

        this.zTreeObj = $.fn.zTree.init($("#epopTree_"+args.id), setting, zNodes);
        let nodes = this.zTreeObj.getNodes();
        for (let node of nodes) {
            if (typeof(args.expandLevel) != 'undefined') {
                this.defaultExpand(node, args.expandLevel);
            } else {
                this.zTreeObj.expandNode(node, true, false, false);
            }
        }

        // $("#epopTree").find("*").css({"font-size":"16px","line-height":"14px"});
        // $("[id^='epopTree']").css({"font-size":"16px","line-height":"14px"});

    }

    //页面进入时，按照级别默认展开
    defaultExpand(node, level) {
        if (node.level == level) {
            this.zTreeObj.expandNode(node, true, false, false);
        } else {
            let children = node.children;
            if (children && children.length > 0) {
                for (let cc of children) {
                    this.defaultExpand(cc, level);
                }

            }
        }
    }


    callback(datas,args,type){
        let href = args[type];
        if( typeof(href)!='undefined' && href!=''){
            let handlerInfo = handlerUtils.resolveHandler(href);
            handlerInfo.args = handlerInfo.args ||{};
            handlerInfo.args.data = datas;
            handlerUtils.invokeHandler(handlerInfo.path, handlerInfo.method, handlerInfo.args);
        }

    }

    //ztree callback
    /**
     * 保证单击到节点任何位置，节点都被选中
     * @param event
     * @param treeId
     * @param treeNode
     * @param clickFlag
     */
    zTreeOnClick(event, treeId, treeNode,clickFlag){
        util.setClickNodeScrollPos(treeId,event);//设置滚动条到
        // alert(treeNode.tId + ", " + treeNode.name+", "+clickFlag);
        let checked = true;
        if(treeNode.checked){
            checked = false;
        }
        this.zTreeObj.checkNode(treeNode,checked,true,true);
    }



}
