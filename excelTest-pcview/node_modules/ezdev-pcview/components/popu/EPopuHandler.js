/**
 * @描述：事件类，继承Handler
 * Created by wangchen on 2017/8/7.
 * Epopu对应的Handler，用于事件
 * 重写了search查询、fetchData数据读取等方法
 * 生成列表的thead、tbody方法
 * 实现了业务程序中回调事件选中行和点击复选框等点击事件
 */
import Handler from "../../handler/Handler";
import eventUtils from "../../utils/EvenUtils";
import Multiple from "../utils/multiple/Multiple";
import DynamicListHandler from "../utils/DynamicListHandler";//动态列显示列表hander
import handlerUtils from "../../handler/HandlerUtils";
import util from "../utils/util"
import handlerManager from "../../handler/HandlerManager";

export default class PopHandler extends Handler {


    constructor(options) {
        super(options);
        this.multiple = new Multiple();
        this.dynamicListHandler = new DynamicListHandler({resolveTpl:this.resolveTpl});
    }

    resolveTpl(tpl) {
        return require("./tpl/" + tpl + ".html");
    }

    /**
     * 实现查询功能
     * @param args
     * {url:/demo/mybatisuser/pages-(必选),type:post-(默认),tpl:list-(默认),contentId:list-(默认)}
     */
    search(args) {
        args.getSelectedVals = this.getBackDisplay;
        args.checkboxClick = this.clickChk.bind(this);
        args.rowClick = this.clickone.bind(this);
        args = this.setStoreArgs(args);
        // args.contentId = this.contentId;
        args.mcid = this.mcid;
        return this.dynamicListHandler.search(args);
    }

    //行click事件，选中某个元素
    clickone(rowArgs, dom, args) {
       /* $('#' + args.elId + '_dis').val(args.text);
        $('#' + args.elId + '_hid').val(args.code);*/
        this.multiple.setBackDisplay(args.elId, [rowArgs.text], [rowArgs.code]);
        layer.close(args.layerId);
        //直接给业务方法提供选中行的data
        this.callback(rowArgs.data,args,util.eventType.onSelected);//要求业务代码必须用util.eventType.onSelected中的常量定义选中方法
    }

    //点击复选框事件，用于多选
    clickChk(chkArgs, dom,args) {
        if (typeof(dom) == 'undefined') {
            dom = eventUtils.getCurrentEventTarget();
        }
        let $dom = $(dom);
        if ($dom.is(':checked')) {
            this.multiple.appendBackDisplay(args.elId, chkArgs.text, chkArgs.code);
            this.callback(chkArgs.data,args,util.eventType.onCheck);//要求业务代码必须用util.eventType.onCheck中的常量定义选中方法
        } else {
            this.multiple.removeBackDisplay(args.elId, chkArgs.code);
            //直接给业务方法提供选中行的data
            this.callback(chkArgs.data,args,util.eventType.onUncheck);//要求业务代码必须用util.eventType.onUncheck中的常量定义选中方法
        }
    }

    callback(data,args,type){
        let href = args[type];//type对应了参数中的回调函数的key
        if( typeof(href)!='undefined' && href!=''){
            let handlerInfo = handlerUtils.resolveHandler(href);
            handlerInfo.args = handlerInfo.args ||{};
            handlerInfo.args.data = data;
            handlerUtils.invokeHandler(handlerInfo.path, handlerInfo.method, handlerInfo.args);
        }

    }

    /**
     * 为防止传入的args中多余的参数对下面的search方法造成未知影响，这里重新组件args，只组装有用的参数
     * @param args
     * @returns {*}
     */
    setStoreArgs(args){
        let args2 = $('#'+args.elId+'_hid').data('args');
        args.multiple = args2.multiple
        args[util.eventType.onCheck] = args2[util.eventType.onCheck]
        args[util.eventType.onSelected] = args2[util.eventType.onSelected]
        args[util.eventType.onUncheck] = args2[util.eventType.onUncheck]
        args['queryParam'] = args2['queryParam'];
        args['queryParamName'] = args2['queryParamName'];
        args['displayColumns'] = args2['displayColumns'];
        args['displayColumnnames'] = args2['displayColumnnames'];

        return args;
    }

    //从页面回显控件获取当前已有的值
    getBackDisplay(args) {
        let id = args.elId;
        return $('#' + id + '_hid').val();
    }


}
