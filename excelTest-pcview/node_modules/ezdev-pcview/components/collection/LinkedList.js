/**
 * Created by wangchen on 2017/8/11.
 * --------------------
 * - 单向链表 -
 * --------------------
 * 实现单向链表的数据结构，用于方便在某些元素前后的插入
 */
/**
 * 链表中的结点
 */
class Node {
    constructor(element) {
        this.element = element;
        this.next = null;
    }

  
}

export default class LinkedList {

    constructor() {
        this.head = new Node("head");
        this.tail = this.head;
        this._size = 0;
        /*this.find = find;
        this.insert = insert;
        this.remove = remove;
        this.display = display;
        this.findPrevious = findPrevious;*/
    }

    find(item) {
        let currNode = this.head;
        while (currNode.element != item) {
            currNode = currNode.next;
            if(currNode == null){
            	return null;
            }
        }
        return currNode;
    }

    insert(newElement, item) {
        var newNode = new Node(newElement);
        var current = this.find(item);
        if (current == null)
            return console.log("can't find the item");
        newNode.next = current.next;
        current.next = newNode;
        if(this.tail == current){
        	this.tail  = newNode;
        }
        ++this._size;
    }

    add(newElement){
    	this.insert(newElement,this.tail.element);
    }

    remove(item) {
        var prevNode = this.findPrevious(item);
        if (prevNode.next != null){
            prevNode.next = prevNode.next.next;
            this._size--;
        }

    }

    findPrevious(item) {
        var currNode = this.head;
        while (currNode.next != null && currNode.next.element != item) {
            currNode = currNode.next;
        }
        return currNode;
    }

    display() {
        var current = this.head;
        while (current.next != null) {
            console.log(current.next.element);
            current = current.next;
        }
    }

    size(){
    	return this._size;
    }
}
