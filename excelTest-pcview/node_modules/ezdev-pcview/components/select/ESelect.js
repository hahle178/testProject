/***
 * @描述：下拉框类，继承Component
 * @author:create by wangchen 2017.7.26
 * @用途：可以根据定位目标元素和数据渲染下拉框
 * @使用中注意点如下：
 * 标签名称e-select
 * 标签中的属性：
 * e-option-value ===> 类optionValue属性，下拉框选项的value
 * e-option-text ===> 类optionText属性，下拉框选项的文字
 * e-value ===> 类中的value属性，默认值
 * e-target ===> 类中的target属性，用于级联的情况，target为要影像的下拉框的id，在级联情况会添加onchange事件把本下拉框的value传给target对象
 * 其他：都为html原生属性或者其他第三方组件使用属性
 * html中使用举例如下：
 <e-select class="form-control"
    name="gwType"
    e-unique="gwType"
    e-option-value="code"
    e-option-text="value"
    e-url="/test/dictionary/getChildrenByCode?code=gwType" e-value='sc'
    e-type="get"
    e-event="event:change,href:/showcase/comtest/test"
    datatype="*"  >
 </e-select>

 */
import BaseComponent from "../BaseComponent";
import handlerUtils from "../../handler/HandlerUtils";
import htmlUtils from "../../utils/HtmlUtils";
import $ from 'jquery';
import  "select2/dist/css/select2.min.css";
import  "select2";

'use strict';
let __instance = null;
export default class ESelect extends BaseComponent {

    constructor() {
        super();
        this.name = 'e-select';
    }

    static instance() {
        if (__instance == null) {
            __instance = new ESelect();
        }
        return __instance;
    }

    /**
     * @Override
     */
    setArgsBeforeRw(args, options) {
        args = super.setArgsBeforeRw(args, options);
        if (typeof(args.disblankvalue) != 'undefined' && (args.disblankvalue == 'false' || args.disblankvalue == false)) {
            args.disblankvalue = false;
        } else {
            args.disblankvalue = true;
        }
        return args;
    }

    /**
     * @Override
     */
    generateHtml(args) {

        let html = [],
            val, text;
        if (args.disblankvalue) {
            html.push('<option value="">请选择</option>');
        }

        if (typeof(args.data) != 'undefined' && args.data != null) {
            let data =  args.data.data || args.data;
            if (data && Array.isArray(data)) {
                data.forEach(function(item) {
                    val = item[args.optionValue || "code"];//按照当前字典接口的名称设置默认值
                    text = item[args.optionText || "name"];//按照当前字典接口的名称设置默认值
                    if (args.value && (args.value === val)) { //如果设置了选择值，标记选择
                        html.push('<option value="' + val + '" selected="selected">' + text + '</option>')
                    } else {
                        html.push('<option value="' + val + '">' + text + '</option>')
                    }

                });
            }
        }

        let select = [];
        select.push('<select ');
        select.push(this.generateDomAttrs(args.attributes));
        select.push('>');
        select.push(html.join(''));
        select.push('</select>');

        return select.join('');
    }

    /**
     * @Override
     */
    executeAferRw(args) {
        let  select = $("#"+args.id);
        //判断是否多选
        if(typeof(args.multiple)!='undefined' && args.multiple == 'multiple'){
            select.select2();//初始化多选select2组件
            let event = args['event'];
            if(event){
                let that = this;
                let router = htmlUtils.getJsonByStr(event);
                select.on(router.event,function (e) {
                    that.callback( router.href);
                });
            }

        }
        //级联代码处理
        this.cascading(args,select);

    }

    /**
     * 级联逻辑处理
     */
    cascading(args,select){
        if (typeof(args.target) != 'undefined' && args.target.length > 0) {
            let para = {};
            para.el = BaseComponent.parseElObject('#' + args.target);
            para = super.setArgsBeforeRw(para);
            select.on('change', function() {
                let val = $(this).val();
                para[para.urlparam] = val;
                let targetElect = ESelect.instance();
                targetElect.reWriteHtml(para);
            });
        }
    }

    /**
     * 调用event方法
     * @param href
     */
    callback(href){
        // let href = args[type];//type对应了参数中的回调函数的key
        if( typeof(href)!='undefined' && href!=''){
            let handlerInfo = handlerUtils.resolveHandler(href);
            handlerInfo.args = handlerInfo.args ||{};
            // handlerInfo.args.data = data;
            handlerUtils.invokeHandler(handlerInfo.path, handlerInfo.method, handlerInfo.args);
        }

    }

}
