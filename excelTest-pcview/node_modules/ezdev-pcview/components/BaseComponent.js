/***
 * @描述：组件基类
 * @author:create by wangchen 2017.7.26
 * @用途：编写组件都需要继承该基础类
 * @使用中注意点如下：
 * 1、关于子类编写：
 * 对象获取：使用时采用单例模式用静态方法instance获取对象
 *
 * 常用到的属性：name为标签名称，unique为缓存key，程序会自动将ajax读取的数据存入缓存，在下次读取url前会先读取缓存
 *
 * 对外接口方法:reWriteHtml(args)，args={el:(必填),data:[],url:string}
 *              updateArgs：更新对象参数，refresh：更新参数后刷新渲染
 * 参数：
 * el为信息目标对象，可以为dom元素或者jquery选择器使用的字符串如"#id"                            
 * data与url两个选择一个，如果传入data参数，则组件用data渲染，否则用ajax读取url的数据后再渲染html
 *
 * 子类经常重写的方法：
 * generateHtml(必须重写),setArgsBeforeRw,executeAferRw，其中generateHtml为生成html
 * 方法必须重写。其他方法视自定义类情况而定。方法具体信息请看方法注释。
 * 
 * 子类经常复用的方法：
 * generateDomAttrs方法为，用于把目标元素的属性在新的dom上重新生成
 * 
 * 2、关于组件类在html中的使用：
 * 所有类在html中以自定义标签的形式存在，所有标签及标签上要使用的属性起名都应该以"e-"开头，html原生属性不在此范围
 * 举例如下：
 * <e-select class="form-control"  name="gwType" e-unique="gwType" e-option-value="code" 
                                   e-option-text="value" e-url="/test/dictionary/getChildrenByCode?code=gwType" e-value='sc'
                                   type="get" e-event="event:change,href:/showcase/comtest/test" 
                                   datatype="*"  >
                                  </e-select>
 * 3、html中e-标签的公用属性：
 * e-url ===> 类中的url属性，用于数据读取的地址
 * e-unique ==> 用于缓存的唯一标识key，如果使用该属性则启用缓存（可选）
 * e-type ===> 类中的type属性，用于ajax的类型，默认post，如果是get类型的http请求需要设置e-type=get
 * e-urlparam===>类中的urlparam属性，ajax在读取url前如果发现有该属性则会到参数args中查找该属性对应的值，如果不存在则不读取url，常用于级联的使用中
 * e-domopt ======>类中的domopt属性，用于对目标定位元素加入html的方式，默认为replace操作，替换目标元素，其他方式请参照domOptType方法
 * e-url-ajax-data====>类中urlAjaxData属性，通常用于给post方式的url传递参数，也可以用于get请求，格式为name:val,xx:fafa,ww:fw的形式
 */
import ajaxRequest from "../ajax/AjaxRequest";
import cacheUtils from "../cache/CacheUtils";
// import analyzerManager from "../render/analyzer/AnalyzerManager";
// import BaseHandler from "../handler/BaseHandler";
import miscUtils from "../utils/MiscUtils";
import HtmlUtils from "../utils/HtmlUtils";
import util from "./utils/util";

'use strict';

export default class BaseComponent {

    constructor() {
        this.name = 'BaseComponent';
        this.eAttrToAttrMap = new Map();//存放的是e-开头的属性需要转为的第三方控件使用的普通属性的项
        this.eAttrToAttrMap.set('e-multiple','multiple');
        this.id = miscUtils.guid();
    }

    static instance() {
        return null;
    }

    /**
     * 对el的dom操作
     */
    static domOptType() {
        return {
            after: 'after',
            before: 'before',
            replace: 'replace',
            append: 'append'
        };
    }

    /**
     * 解析传入的dom元素
     * return $(dom)
     */
    static parseElObject(el) {
        if (BaseComponent.isJqueryObject(el)) {
            return el;
        } else if (typeof(el) == 'string' || BaseComponent.isDomObject(el)) {
            return $(el);
        } else {
            return null;
        }
    }

    //判断是否Jquery对象
    static isJqueryObject(obj) {
        return obj instanceof jQuery;
    }

    //判断是否Dom元素
    static isDomObject(obj) {
        let isDOM = (typeof HTMLElement === 'object') ?
            function(obj) {
                return obj instanceof HTMLElement;
            } :
            function(obj) {
                return obj && typeof obj === 'object' && obj.nodeType === 1 && typeof obj.nodeName === 'string';
            };
        return isDOM;
    }

    //对象是否已经生成
    /*static isExist(options){
        let el = BaseComponent.wrapEl(options.el);
        let attr = el.attr('componentid');
        if(attr && attr!=null && attr!=''){
            return true;
        }
        return false;
    }*/

    /**
     * 对外接口方法main
     * 重新目标dom的html
     * 注：同一个对象仅在第一次渲染时调用次方法
     * el:必填参数
     */
    reWriteHtml(options) {
        let args = {};
        $.extend(args, options);
        args.el = BaseComponent.parseElObject(options.el); //目标元素
        if (args.el == null) {
            return null;
        }
        if(typeof(options.el) == 'string'){
            let elbs = options.el;
            if(elbs.indexOf('#')==0){//判断是否是id
                args.elbs = elbs.substring(1);//如果是id，则用id进行标识
            }else{
                args.elbs = elbs;
            }
        }else {
            args.elbs = args.el.attr('id') ||  this.id;
        }

        args.data = options.data;
        args.domopt = options.domopt; //新增dom的操作方式，在目标元素执行after,before,replace,append
        if (typeof(options.attributes) != 'undefined') {
            args.attributes = options.attributes;
        }
        let container = this.getContainerByElbs(args.elbs);
        args.parentContainer = args.el.parent();
        if(args.el.length==0 && container.length>0){
            args.parentContainer = container.parent();
        }
        args = this.setArgsBeforeRw(args, options);
        this.args = args;
        this.options = options;
        this.checkDataAndRwHtml(args);

        return args;
    }

    /**
     * 更新组件对象参数
     * @param args
     */
    updateArgs(args){
        if(typeof(args) == 'undefined' || args == null){
            return;
        }
        let allArgs = this.args;
        let url = args.url;
        let unique = allArgs.unique || args.unique;
        if(typeof(url)!='undefined' && typeof(unique)!='undefined' && url!=null && unique!=null ){
            cacheUtils.push(unique,null);//因为修改了url，需要情况对应的缓存
            args.data = null;//同时需要把里面的data清空
        }
        $.extend(allArgs, args);
        this.args = allArgs;
    }

    /**
     * 刷新html
     * @returns {{}|*}
     */
    refresh(args){
        this.updateArgs(args);
        this.checkDataAndRwHtml(this.args);
        return this.args;
    }


    /**
     * 在重新html前，设置参数。页面标签的属性参数会覆盖js接口设置的参数，子类有需要可以重写
     */
    setArgsBeforeRw(args, options) {
        let items = args.el[0];
        let attrMap = null;
        if(typeof(items)=='undefined' || items ==null){
            attrMap = this.getContainerAttsByElbs(args.elbs);
        }else{
            attrMap = items.attributes;
        }
        args = this.parseAttrsParam(args, attrMap);
        //如果value中用”,“隔开字符串，说明有多个值，value为数组
        if (typeof(args.value) == 'string' && args.value != '' && args.value.indexOf(',') > 0) {
            args.value = args.value.split(',');
        }
        args.mcid = this.id;
        return args;
    }

    /**
     * 重新html后，封装dom后会执行的方法，子类有需要可以重写
     */
    executeAferRw(args, options) {

    }

    /**
     * 检查data是否有效，否则检查是否存在url，如果存在则执行ajax请求设置data
     * 获取data后，生成html
     */
    checkDataAndRwHtml(args) {
        this.fetchData(args).then(function(data) {
            args.data = data;
            let newDomHtml = this.generateHtml(args);
            let $newDom = $(newDomHtml);
            args.content = $newDom;
            this.wrapEl($newDom, args.domopt, args.el,args['attributes'],args.elbs);
            this.executeAferRw(args);
            let eventAnalyzer = window.ezdev.analyzerManager.get('EventAnalyzer');
            eventAnalyzer.analyze(args.parentContainer);
            let routerAnalyzer = window.ezdev.analyzerManager.get('RouterAnalyzer');
            routerAnalyzer.analyze(args.parentContainer);
        }.bind(this));

    }

    //生成对应的html，子类需要重写
    generateHtml() {
        //this.el.attr('componentid',this.id);  
        return '';
    }

    //获取jquery封装的dom对象的tagName
    getDomTagName($obj) {

        return $obj.prop("tagName");
    }

    /**
     * 将新生成的dom html 追加到el
     * *为了可以控制新生成的html元素，在新元素外面用div包裹，以目标id+_container 为该div的id，该div为元素容器div
     * *在每次渲染html时会检查该div是否已经存在，如果存在则先删除就的容器div
     * @param $newDom
     * @param domopt
     * @param el
     * @param elId
     */
    wrapEl($newDom, domopt, el,attributes,elbs) {
        if (typeof(domopt) == 'undefined' || domopt == null || domopt == '') {
            domopt = 'replace';
        }
        let oldContainer  = this.getContainerByElbs(elbs);
        let newContainer =  this.generateWrapContainer(elbs,attributes);

        switch (domopt) {
            case BaseComponent.domOptType().after:
                el.after(newContainer);
                break;
            case BaseComponent.domOptType().before:
                el.before(newContainer);
                break;
            case BaseComponent.domOptType().replace:
                if(oldContainer.length>0){
                    oldContainer.after(newContainer);
                }else{
                    el.replaceWith(newContainer);

                }
                // el.replaceWith($newDom);
                // el.after(newContainer);
                // el.hide();
                break;
            case BaseComponent.domOptType().append:
                el.append(newContainer);
                break;
        }
        newContainer.append($newDom);
        if(oldContainer.length>0){//如果存在旧有的容器对象，需要删除，好后面新建
            oldContainer.remove();
        }
    }

    /**
     * 生成htmldom属性的html字符串
     */
    generateDomAttrs(attributes) {
        let attrsHtml = [];
        if (typeof(attributes) != 'undefined' && attributes != null && attributes != '') {
            attrsHtml.push(' ');
            for (let i in attributes) {
                attrsHtml.push(i);
                attrsHtml.push('="');
                attrsHtml.push(attributes[i]);
                attrsHtml.push('"');
                attrsHtml.push(' ');
            }
        }

        return attrsHtml.join('');
    }

    //获取dom属性上的值
    parseAttrsParam(args, attrMap) {
        let attributes = {};
        let argsAttrs = {}; //获取标签上的参数
        let nodeName = null;
        let argsName = null;
        let nodeValue = null;
        for (var i = 0; i < attrMap.length; i++) {
            nodeValue = attrMap[i].nodeValue;
            nodeName = attrMap[i].nodeName;
            if (typeof(nodeName) != "undefined" && nodeName.indexOf('e-') > -1) {//判断e标签属性
                argsName = this.transTagAttr2ArgsName(nodeName);//标签属性转为js对象参数名
                if(typeof (args[argsName])!='undefined' && args[argsName]!=null && args[argsName]!=''){
                    nodeValue = args[argsName];//以js传入对象为主
                }
                argsAttrs[argsName] = nodeValue;
                args[argsName] = nodeValue;
            }else {//普通元素属性  其中args.id在此处赋值
                if(typeof (args[nodeName])!='undefined' && args[nodeName]!=null && args[nodeName]!=''){
                    nodeValue = args[nodeName];//以js传入对象为主
                }
                args[nodeName] = nodeValue;
            }

            attributes[nodeName] = nodeValue;
            if(typeof(this.eAttrToAttrMap.get(nodeName))!='undefined'){
                attributes[this.eAttrToAttrMap.get(nodeName)] = nodeValue;
            }
            // console.log(attrMap[i].nodeName+':'+attrMap[i].nodeValue);
        }

        this.setArgsId(args);
        attributes.id = args.id;//保证属性上的id
        argsAttrs.id = args.id;//保证属性上的id
        args['attributes'] = attributes;
        args['argsAttrs'] = argsAttrs;
        return args;
    }

    

    //将标签上的el-xx-xx参数转为class参数
    transTagAttr2ArgsName(name) {
        name = name.replace('e-', '');
        if (name.indexOf('-') <= 0) {
            return name;
        }
        let arr = name.split('-');

        for (let i = 0; i < arr.length; i++) {
            if (i > 0) {
                arr[i] = this.capUpperCase(arr[i]);
            }

        }

        return arr.join('');
    }

    //首字母大写
    capUpperCase(str) {
        return str.toLowerCase().replace(/( |^)[a-z]/g, (L) => L.toUpperCase());
    }

    


    /**
     * 获取下拉框所需要的数据
     * @param args
     * @returns {Promise}
     */
    fetchData(args) {
        return new Promise((resolve) => {
            let data = args.data;
            let cacheData = null;
            if (typeof(data) != 'undefined' && data != null && data.length > 0) {
                cacheData = data;
            } else {
                cacheData = cacheUtils.get(args.unique);
            }
            if (cacheData) {
                resolve(cacheData);
            } else if (typeof(args.url) != 'undefined' && args.url != '') {
                let urlparam = args.urlparam;
                let ifAjax = true;
                let newArgs = $.extend(true,{},args);

                if (typeof(urlparam) != 'undefined' && urlparam.length > 0) {
                    if (typeof(newArgs[urlparam]) != 'undefined') {
                            if (newArgs.url.indexOf("?") > -1) {
                                newArgs.url += '&' + urlparam + '=' + newArgs[urlparam];
                            } else {
                                newArgs.url += '?' + urlparam + '=' + newArgs[urlparam];
                            }
                    } else {
                        ifAjax = false;
                    }
                }


                //url-ajax-data
                if(typeof(newArgs.urlAjaxData)!='undefined'){
                    newArgs['data'] = HtmlUtils.getJsonByStr(newArgs.urlAjaxData);
                 }

                if (ifAjax) {
                    ajaxRequest.ajax(newArgs).then((data) => {
                        data = util.findData(data);
                        resolve(data);
                        if (typeof(args.unique) != 'undefined') {
                            cacheUtils.push(args.unique, data)
                        }
                    });



                } else {
                    resolve(null);
                }


            } else {
                resolve(null);
            }
        });
    }

    /**
     * 生成包裹generate的div容器
     * @param id
     * @param elbs
     * @param attributes
     * @returns {void|jQuery|HTMLElement}
     */
    generateWrapContainer(elbs,attributes){
        // let containerId = id + "_container";
        // let newContainer = $('<div id="'+containerId+'" elbs="'+elbs+'" elid="'+id+'"></div>');
        let str = '<div  elbs="'+elbs+'" ownerid = "'+this.id+'"/>';
        let newContainer = $(str);
        newContainer.data('attributes',attributes);
        return newContainer;
    }

    /**
     * 根据id获取容器
     * @param id
     * @returns {void|jQuery|HTMLElement}
     */
    getContainerById(id){
        let containerId = id + "_container";
        return $('#'+containerId);
    }

    /**
     * 根据el的标识获取容器
     * @param elbs
     * @returns {void|jQuery|HTMLElement}
     */
    getContainerByElbs(elbs){
        return $('div [elbs="'+elbs+'"]');
    }

    /***
     * 根据el的标识获取容器上的记忆的attributes
     * @param elbs
     * @returns {*}
     */
    getContainerAttsByElbs(elbs){
        let container = $('div [elbs="'+elbs+'"]');
        return container.data('attributes');
    }

    setArgsId(args){
        args.id = args.id || args.name || this.id;//保证id必须有，需要在后面生成的html中使用
        // args.id = args.id || this.id;//保证id必须有，需要在后面生成的html中使用
    }


    get eventName() {
        //return 'E'+this.capUpperCase(this._name.replace('e-', ''));
        return this._name.replace('e-', '');
    }


    get name() {
        return this._name;
    }

    set name(value) {
        this._name = value;

    }

}
