/**
 * Created by zhaofs on 2017/5/25.
 * --------------------
 * - 数组操作相关方法 -
 * --------------------
 */
import config from "../Config";

export default {
    /**
     * 把form序列化为JSON
     * @param form
     * @returns {{}}
     */
    formToJson: function (form) {
        if (typeof (form) === 'string') {
            form = $(`#${form}`);
        }
        let serializeObj = {};
        let array = form.serializeArray();
        $(array).each(function () {
            if (serializeObj[this.name]) {
                if (Array.isArray(serializeObj[this.name])) {
                    serializeObj[this.name].push(this.value);
                } else {
                    serializeObj[this.name] = [serializeObj[this.name], this.value];
                }
            } else {
                serializeObj[this.name] = this.value;
            }
        });
        return serializeObj;
    },
    /**
     * TODO
     * 把form序列化为JSON，支持复杂对象，主要是解决编辑页中一对多的情况
     * html中对象中的属性对象用“.”，对象中的list用“[]”为下标
     * ex:page对象中有个属性名为list的ArrayList对象和一个名称为vo的对象，
     * 页面中input name写法:name="vo.id" name="list[0].id" 依次类推
     * @param form
     * @returns {{}}
     */
    formToPageJson: function (form) {
        if (typeof(form) === 'string') {
            form = $(`#${form}`);
        }
        let serializeObj = {};
        let array = form.serializeArray();
        $(array).each(function () {
            try {
                let name = this.name;
                let index1 = name.indexOf(".");
                let index2 = name.indexOf("[");
                // console.log('index1==='+index1+'index2==='+index2);
                if (index1 > -1 && index2 === -1) {
                    let name1 = name.substring(0, index1);
                    let name2 = name.substring(index1 + 1);
                    if (!serializeObj[name1]) {
                        serializeObj[name1] = {};
                    }
                    serializeObj[name1][name2] = this.value;
                    //t = this.value;
                }
                if (index2 > -1) {
                    let index3 = name.indexOf("]");
                    let array = name.substring(0, index2);
                    let n = name.substring(index2 + 1, index3);//数组下标
                    let attr = name.substring(index3 + 2);//对象属性
                    if (!serializeObj[array]) {
                        serializeObj[array] = [];
                    }
                    if (!serializeObj[array][n]) {
                        serializeObj[array][n] = {};
                    }
                    serializeObj[array][n][attr] = this.value;

                }

            } catch (e) {
                alert(e);
            }
        });
        return serializeObj;
    },

    /**
     * 通过元素属性获取JSON对象
     * @param item
     */
    getJsonByAttr: function (item) {
        let option = item.attr(config.optionsTag);
        return option ? this.getJsonByStr(option) : null;
    },

    /**
     * 通过元素属性值获取JSON对象
     * @param str
     */
    getJsonByStr: function (str) {
        let json = {}, index;
        try {
            str.split(',').forEach(function (item) {
                index = item.indexOf(':');
                //modify lhw 20170214 需要trim，因为e-options内可能有空格
                let key = $.trim(item.substring(0, index));
                //modify lhw 20170214 需要trim，因为e-options内可能有空格
                json[key] = $.trim(item.substring(index + 1));
            });
        } catch (e) {
            throw new Error('字符串不符合规范，请输入正确格式如: href:demo/user/add,method:add', e.message)
        }
        return json;
    },


    /**
     * 根据url获取参数
     * @param url
     * @returns {{}}
     */
    getArgsByUrl: function (url) {
        let args = {}, urls = url.split("?");
        if (urls.length > 1) {
            let argss = urls[1].split("&");
            for (let i = 0, len = argss.length; i < len; i++) {
                let urlItem = argss[i];
                let item = urlItem.split("=");
                args[item[0]] = item[1];
            }
        }
        return args;
    },

    /**
     * 根据html元素获取方法参数对象
     * @param itemid
     */
    getArgsByItem: function (item) {
        let option = item.attr(config.eventTag) || item.attr(config.routerTag);
        return this.getArgsByUrl(this.getJsonByStr(option).href);
    },

    /**
     * 自动大小Iframe
     */
    autoSizeIframe:function () {
        let neg = $('.main-header').outerHeight() + $('.main-footer').outerHeight();
        let window_height = $(window).height();
        $('.content iframe:not(.nochange)').css('min-height', window_height - neg);
    }

};